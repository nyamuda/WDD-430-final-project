{"ast":null,"code":"\"use strict\";\n\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegisterService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"../app.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/router\"));\nclass RegisterService {\n  constructor(http, appService, router) {\n    this.http = http;\n    this.appService = appService;\n    this.router = router;\n    this.isRegistering = (0, core_1.signal)(false); // show loading button;\n  }\n\n  register(newUser) {\n    this.isRegistering.set(true);\n    let userDto = {\n      name: newUser.name.trim(),\n      email: newUser.email.trim(),\n      password: newUser.password.trim()\n    };\n    const url = 'http://localhost:8000/register';\n    const headers = new http_1.HttpHeaders().set('Content-Type', 'application/json');\n    this.http.post(url, userDto, {\n      headers\n    }).subscribe(response => {\n      console.log(response['token']);\n      //show toast\n      this.appService.showSuccessToast(`You can now log in with your credentials.`, 'Registration Successful');\n      //disable loading button\n      this.isRegistering.set(false);\n      //take the user to the login page\n      this.router.navigateByUrl('/login');\n    }, error => {\n      //show toast\n      //show toast\n      let message = error['error']['message'] ? error['error']['message'] : error['error']['error'];\n      this.appService.showFailureToast(message, 'Registration failed');\n      //disable loading button\n      this.isRegistering.set(false);\n    });\n  }\n}\n_class = RegisterService;\n_class.ɵfac = function RegisterService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppService), i0.ɵɵinject(i3.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.RegisterService = RegisterService;","map":{"version":3,"names":["core_1","require","http_1","RegisterService","constructor","http","appService","router","isRegistering","signal","register","newUser","set","userDto","name","trim","email","password","url","headers","HttpHeaders","post","subscribe","response","console","log","showSuccessToast","navigateByUrl","error","message","showFailureToast","i0","ɵɵinject","i1","HttpClient","i2","AppService","i3","Router","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\register\\register.service.ts"],"sourcesContent":["import { Injectable, WritableSignal, signal } from '@angular/core';\nimport { User } from '../users/user.model';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Router } from '@angular/router';\nimport { AppService } from '../app.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterService {\n  isRegistering: WritableSignal<boolean> = signal(false); // show loading button;\n\n  constructor(\n    private http: HttpClient,\n    private appService: AppService,\n    private router: Router\n  ) {}\n\n  register(newUser: User) {\n    this.isRegistering.set(true);\n\n    let userDto = {\n      name: newUser.name.trim(),\n      email: newUser.email.trim(),\n      password: newUser.password.trim(),\n    };\n    const url = 'http://localhost:8000/register';\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    this.http.post(url, userDto, { headers }).subscribe(\n      (response) => {\n        console.log(response['token']);\n        //show toast\n        this.appService.showSuccessToast(\n          `You can now log in with your credentials.`,\n          'Registration Successful'\n        );\n\n        //disable loading button\n        this.isRegistering.set(false);\n\n        //take the user to the login page\n        this.router.navigateByUrl('/login');\n      },\n      (error) => {\n        //show toast\n        //show toast\n        let message = error['error']['message']\n          ? error['error']['message']\n          : error['error']['error'];\n        this.appService.showFailureToast(message, 'Registration failed');\n        //disable loading button\n        this.isRegistering.set(false);\n      }\n    );\n  }\n}\n"],"mappings":";;;;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAEA,MAAAC,MAAA,GAAAD,OAAA;;;;;AAMA,MAGaE,eAAe;EAG1BC,YACUC,IAAgB,EAChBC,UAAsB,EACtBC,MAAc;IAFd,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,MAAM,GAANA,MAAM;IALhB,KAAAC,aAAa,GAA4B,IAAAR,MAAA,CAAAS,MAAM,EAAC,KAAK,CAAC,CAAC,CAAC;EAMrD;;EAEHC,QAAQA,CAACC,OAAa;IACpB,IAAI,CAACH,aAAa,CAACI,GAAG,CAAC,IAAI,CAAC;IAE5B,IAAIC,OAAO,GAAG;MACZC,IAAI,EAAEH,OAAO,CAACG,IAAI,CAACC,IAAI,EAAE;MACzBC,KAAK,EAAEL,OAAO,CAACK,KAAK,CAACD,IAAI,EAAE;MAC3BE,QAAQ,EAAEN,OAAO,CAACM,QAAQ,CAACF,IAAI;KAChC;IACD,MAAMG,GAAG,GAAG,gCAAgC;IAC5C,MAAMC,OAAO,GAAG,IAAIjB,MAAA,CAAAkB,WAAW,EAAE,CAACR,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,IAAI,CAACP,IAAI,CAACgB,IAAI,CAACH,GAAG,EAAEL,OAAO,EAAE;MAAEM;IAAO,CAAE,CAAC,CAACG,SAAS,CAChDC,QAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC,OAAO,CAAC,CAAC;MAC9B;MACA,IAAI,CAACjB,UAAU,CAACoB,gBAAgB,CAC9B,2CAA2C,EAC3C,yBAAyB,CAC1B;MAED;MACA,IAAI,CAAClB,aAAa,CAACI,GAAG,CAAC,KAAK,CAAC;MAE7B;MACA,IAAI,CAACL,MAAM,CAACoB,aAAa,CAAC,QAAQ,CAAC;IACrC,CAAC,EACAC,KAAK,IAAI;MACR;MACA;MACA,IAAIC,OAAO,GAAGD,KAAK,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,GACnCA,KAAK,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,GACzBA,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;MAC3B,IAAI,CAACtB,UAAU,CAACwB,gBAAgB,CAACD,OAAO,EAAE,qBAAqB,CAAC;MAChE;MACA,IAAI,CAACrB,aAAa,CAACI,GAAG,CAAC,KAAK,CAAC;IAC/B,CAAC,CACF;EACH;;SA7CWT,eAAe;;mBAAfA,MAAe,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;AAAA;;SAAfnC,MAAe;EAAAoC,OAAA,EAAfpC,MAAe,CAAAqC,IAAA;EAAAC,UAAA,EAFd;AAAM;AADpBC,OAAA,CAAAvC,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}