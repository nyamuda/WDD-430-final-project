{"ast":null,"code":"\"use strict\";\n\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OauthService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"../../users/users.service\"));\nconst i3 = tslib_1.__importStar(require(\"../../app.service\"));\nconst i4 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i5 = tslib_1.__importStar(require(\"../login.service\"));\nclass OauthService {\n  constructor(http, userService, appService, router, loginService) {\n    this.http = http;\n    this.userService = userService;\n    this.appService = appService;\n    this.router = router;\n    this.loginService = loginService;\n  }\n  //Get OAuth login URLs\n  getOauthUrls() {\n    const url = `http://localhost:8000/oauth/url`;\n    return this.http.get(url);\n  }\n  //Compare two state objects\n  //One from the redirect url and and another from session storage\n  compareStates(redirectState) {\n    // Decode and parse the redirect state from the URL\n    let urlState = JSON.parse(atob(redirectState));\n    let sessionState = this.getStateFromSessionStorage();\n    if (!(urlState && sessionState)) {\n      this.appService.showFailureToast('An unexpected error occurred on the server.');\n      return false;\n    }\n    //compare the states\n    if (urlState.randomString === sessionState.randomString && urlState.currentState === sessionState.currentState) {\n      //set the app redirect URL in case the login is a success\n      this.loginService.redirectUrl.set(sessionState.currentState);\n      return true;\n    }\n    //show an error the states don't match\n    this.appService.showFailureToast('An unexpected error occurred on the server.');\n    return false;\n  }\n  //Login with google\n  getGoogleUserJwtToken(code) {\n    this.http.get(`http://localhost:8000/oauth/google/callback?code=${code}`).subscribe(response => {\n      //save the JWT token to local storage\n      localStorage.setItem('jwt_token', response['token']);\n      //load the user information to the user service\n      //by decoding the access token from local storage\n      this.userService.decodeJwtToken();\n      this.appService.showSuccessToast('Login successful!', '');\n      //navigate the user\n      this.router.navigateByUrl(this.loginService.redirectUrl());\n      //clear the state from the session storage\n      sessionStorage.setItem('oauthState', '');\n    }, error => {\n      //disable loading button\n      // this.isLoggingIn.set(false);\n      //show toast\n      let errorMessage = error['error']['message'] ? error['error']['message'] : error['error']['error'] ? error['error']['error'] : 'An unexpected error occurred on the server.';\n      this.appService.showFailureToast(errorMessage, '');\n    });\n  }\n  //Login with Facebook\n  getFacebookUserJwtToken(code) {\n    this.http.get(`http://localhost:8000/oauth/facebook/callback?code=${code}`).subscribe(response => {\n      //save the JWT token to local storage\n      localStorage.setItem('jwt_token', response['token']);\n      //load the user information to the user service\n      //by decoding the access token from local storage\n      this.userService.decodeJwtToken();\n      this.appService.showSuccessToast('Login successful!', '');\n      //navigate the user\n      this.router.navigateByUrl(this.loginService.redirectUrl());\n      //clear the state from the session storage\n      sessionStorage.setItem('oauthState', '');\n    }, error => {\n      // //disable loading button\n      // this.isLoggingIn.set(false);\n      //show toast\n      let errorMessage = error['error']['message'] ? error['error']['message'] : error['error']['error'] ? error['error']['error'] : 'An unexpected error occurred on the server.';\n      this.appService.showFailureToast(errorMessage, '');\n    });\n  }\n  //The state parameter for Oauth\n  generateRandomState(currentState) {\n    // Generate a random string for security\n    const randomString = Math.random().toString(36).substring(2);\n    // Create the state object\n    const stateObject = {\n      randomString: randomString,\n      currentState: currentState\n    };\n    // Convert the state object to a JSON string\n    const stateString = JSON.stringify(stateObject);\n    // Save it to session storage\n    sessionStorage.setItem('oauthState', stateString);\n    //encode it\n    let encodedState = btoa(stateString);\n    return encodedState;\n  }\n  // Read the state object from session storage\n  getStateFromSessionStorage() {\n    // Get the JSON string from session storage\n    const stateString = sessionStorage.getItem('oauthState');\n    // Check if it exists\n    if (stateString) {\n      // Parse the JSON string into an object\n      const stateObject = JSON.parse(stateString);\n      return stateObject;\n    } else {\n      // If it doesn't exist, return null\n      return null;\n    }\n  }\n}\n_class = OauthService;\n_class.ɵfac = function OauthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UsersService), i0.ɵɵinject(i3.AppService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.LoginService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.OauthService = OauthService;","map":{"version":3,"names":["OauthService","constructor","http","userService","appService","router","loginService","getOauthUrls","url","get","compareStates","redirectState","urlState","JSON","parse","atob","sessionState","getStateFromSessionStorage","showFailureToast","randomString","currentState","redirectUrl","set","getGoogleUserJwtToken","code","subscribe","response","localStorage","setItem","decodeJwtToken","showSuccessToast","navigateByUrl","sessionStorage","error","errorMessage","getFacebookUserJwtToken","generateRandomState","Math","random","toString","substring","stateObject","stateString","stringify","encodedState","btoa","getItem","i0","ɵɵinject","i1","HttpClient","i2","UsersService","i3","AppService","i4","Router","i5","LoginService","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\login\\oauth\\oauth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { UsersService } from '../../users/users.service';\nimport { AppService } from '../../app.service';\nimport { Router } from '@angular/router';\nimport { LoginService } from '../login.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OauthService {\n  constructor(\n    private http: HttpClient,\n    private userService: UsersService,\n    private appService: AppService,\n    private router: Router,\n    private loginService: LoginService\n  ) {}\n\n  //Get OAuth login URLs\n  getOauthUrls(): Observable<OauthUrls> {\n    const url = `http://localhost:8000/oauth/url`;\n\n    return this.http.get<OauthUrls>(url);\n  }\n\n  //Compare two state objects\n  //One from the redirect url and and another from session storage\n  compareStates(redirectState: string): boolean {\n    // Decode and parse the redirect state from the URL\n    let urlState: StateObject | null = JSON.parse(atob(redirectState));\n    let sessionState: StateObject | null = this.getStateFromSessionStorage();\n\n    if (!(urlState && sessionState)) {\n      this.appService.showFailureToast(\n        'An unexpected error occurred on the server.'\n      );\n      return false;\n    }\n\n    //compare the states\n    if (\n      urlState.randomString === sessionState.randomString &&\n      urlState.currentState === sessionState.currentState\n    ) {\n      //set the app redirect URL in case the login is a success\n      this.loginService.redirectUrl.set(sessionState.currentState);\n      return true;\n    }\n    //show an error the states don't match\n    this.appService.showFailureToast(\n      'An unexpected error occurred on the server.'\n    );\n    return false;\n  }\n\n  //Login with google\n  getGoogleUserJwtToken(code: string) {\n    this.http\n      .get(`http://localhost:8000/oauth/google/callback?code=${code}`)\n      .subscribe(\n        (response) => {\n          //save the JWT token to local storage\n          localStorage.setItem('jwt_token', response['token']);\n\n          //load the user information to the user service\n          //by decoding the access token from local storage\n          this.userService.decodeJwtToken();\n\n          this.appService.showSuccessToast('Login successful!', '');\n\n          //navigate the user\n          this.router.navigateByUrl(this.loginService.redirectUrl());\n\n          //clear the state from the session storage\n          sessionStorage.setItem('oauthState', '');\n        },\n        (error) => {\n          //disable loading button\n          // this.isLoggingIn.set(false);\n\n          //show toast\n          let errorMessage = error['error']['message']\n            ? error['error']['message']\n            : error['error']['error']\n            ? error['error']['error']\n            : 'An unexpected error occurred on the server.';\n\n          this.appService.showFailureToast(errorMessage, '');\n        }\n      );\n  }\n\n  //Login with Facebook\n  getFacebookUserJwtToken(code: string) {\n    this.http\n      .get(`http://localhost:8000/oauth/facebook/callback?code=${code}`)\n      .subscribe(\n        (response) => {\n          //save the JWT token to local storage\n          localStorage.setItem('jwt_token', response['token']);\n\n          //load the user information to the user service\n          //by decoding the access token from local storage\n          this.userService.decodeJwtToken();\n\n          this.appService.showSuccessToast('Login successful!', '');\n\n          //navigate the user\n          this.router.navigateByUrl(this.loginService.redirectUrl());\n          //clear the state from the session storage\n          sessionStorage.setItem('oauthState', '');\n        },\n        (error) => {\n          // //disable loading button\n          // this.isLoggingIn.set(false);\n\n          //show toast\n          let errorMessage = error['error']['message']\n            ? error['error']['message']\n            : error['error']['error']\n            ? error['error']['error']\n            : 'An unexpected error occurred on the server.';\n\n          this.appService.showFailureToast(errorMessage, '');\n        }\n      );\n  }\n\n  //The state parameter for Oauth\n  generateRandomState(currentState: string): string {\n    // Generate a random string for security\n    const randomString = Math.random().toString(36).substring(2);\n\n    // Create the state object\n    const stateObject = {\n      randomString: randomString,\n      currentState: currentState,\n    };\n\n    // Convert the state object to a JSON string\n    const stateString = JSON.stringify(stateObject);\n\n    // Save it to session storage\n    sessionStorage.setItem('oauthState', stateString);\n\n    //encode it\n    let encodedState = btoa(stateString);\n    return encodedState;\n  }\n\n  // Read the state object from session storage\n  getStateFromSessionStorage(): StateObject | null {\n    // Get the JSON string from session storage\n    const stateString = sessionStorage.getItem('oauthState');\n\n    // Check if it exists\n    if (stateString) {\n      // Parse the JSON string into an object\n      const stateObject = JSON.parse(stateString);\n      return stateObject;\n    } else {\n      // If it doesn't exist, return null\n      return null;\n    }\n  }\n}\n\nexport type OauthUrls = {\n  googleUrl: string;\n  facebookUrl: string;\n};\n\nexport type StateObject = {\n  randomString: string;\n  currentState: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}