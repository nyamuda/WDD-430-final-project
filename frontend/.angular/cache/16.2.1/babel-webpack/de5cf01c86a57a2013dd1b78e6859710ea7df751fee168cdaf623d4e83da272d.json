{"ast":null,"code":"import _defineProperty from \"C:/Users/Pierce T. Nyamuda/Documents/BYUI Courses/spring2023/Angular/final-project/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _class, _class2, _class3, _class4, _class5, _class6;\nimport * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nconst _c0 = [\"mdbScrollspy\", \"\"];\nconst _c1 = [\"*\"];\nclass MdbScrollspyLinkDirective {\n  get scrollIntoView() {\n    return this._scrollIntoView;\n  }\n  set scrollIntoView(value) {\n    this._scrollIntoView = value;\n  }\n  get section() {\n    return this._section;\n  }\n  set section(value) {\n    if (value) {\n      this._section = value;\n    }\n  }\n  constructor(cdRef, document) {\n    _defineProperty(this, \"cdRef\", void 0);\n    _defineProperty(this, \"document\", void 0);\n    _defineProperty(this, \"_scrollIntoView\", true);\n    _defineProperty(this, \"_section\", void 0);\n    _defineProperty(this, \"_id\", void 0);\n    _defineProperty(this, \"scrollspyLink\", true);\n    _defineProperty(this, \"active\", false);\n    this.cdRef = cdRef;\n    this.document = document;\n  }\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  onClick() {\n    if (this.section && this.scrollIntoView === true) {\n      this.section.scrollIntoView();\n    }\n  }\n  detectChanges() {\n    this.cdRef.detectChanges();\n  }\n  assignSectionToId() {\n    this.section = this.document.documentElement.querySelector(`#${this.id}`);\n  }\n  ngOnInit() {\n    this.assignSectionToId();\n  }\n}\n_class = MdbScrollspyLinkDirective;\n_defineProperty(MdbScrollspyLinkDirective, \"\\u0275fac\", function _class_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n});\n_defineProperty(MdbScrollspyLinkDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"mdbScrollspyLink\", \"\"]],\n  hostVars: 4,\n  hostBindings: function _class_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function _class_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"scrollspy-link\", ctx.scrollspyLink)(\"active\", ctx.active);\n    }\n  },\n  inputs: {\n    scrollIntoView: \"scrollIntoView\",\n    id: [\"mdbScrollspyLink\", \"id\"]\n  }\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyLinkDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyLink]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    scrollIntoView: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspyLink']\n    }],\n    scrollspyLink: [{\n      type: HostBinding,\n      args: ['class.scrollspy-link']\n    }],\n    active: [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', []]\n    }]\n  });\n})();\nclass MdbScrollspyService {\n  constructor() {\n    _defineProperty(this, \"scrollSpys\", []);\n    _defineProperty(this, \"activeSubject\", new Subject());\n    _defineProperty(this, \"active$\", this.activeSubject);\n  }\n  addScrollspy(scrollSpy) {\n    this.scrollSpys.push(scrollSpy);\n  }\n  removeScrollspy(scrollSpyId) {\n    const scrollSpyIndex = this.scrollSpys.findIndex(spy => {\n      return spy.id === scrollSpyId;\n    });\n    this.scrollSpys.splice(scrollSpyIndex, 1);\n  }\n  updateActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    this.setActiveLink(activeLink);\n  }\n  removeActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    if (!activeLink) {\n      return;\n    }\n    activeLink.active = false;\n    activeLink.detectChanges();\n  }\n  setActiveLink(activeLink) {\n    if (activeLink) {\n      activeLink.active = true;\n      activeLink.detectChanges();\n      this.activeSubject.next(activeLink);\n    }\n  }\n  removeActiveLinks(scrollSpyId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    scrollSpy.links.forEach(link => {\n      link.active = false;\n      link.detectChanges();\n    });\n  }\n}\n_class2 = MdbScrollspyService;\n_defineProperty(MdbScrollspyService, \"\\u0275fac\", function _class2_Factory(t) {\n  return new (t || _class2)();\n});\n_defineProperty(MdbScrollspyService, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  get collapsible() {\n    return this._collapsible;\n  }\n  set collapsible(value) {\n    this._collapsible = coerceBooleanProperty(value);\n  }\n  constructor(scrollSpyService, _elementRef, _renderer) {\n    _defineProperty(this, \"scrollSpyService\", void 0);\n    _defineProperty(this, \"_elementRef\", void 0);\n    _defineProperty(this, \"_renderer\", void 0);\n    _defineProperty(this, \"links\", void 0);\n    _defineProperty(this, \"_destroy$\", new Subject());\n    _defineProperty(this, \"_id\", void 0);\n    _defineProperty(this, \"_collapsible\", false);\n    _defineProperty(this, \"activeLinkChange\", new EventEmitter());\n    _defineProperty(this, \"activeSub\", void 0);\n    _defineProperty(this, \"collapsibleElementHeight\", 0);\n    this.scrollSpyService = scrollSpyService;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n  }\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  ngOnInit() {\n    this.collapsibleElementHeight = this.host.getBoundingClientRect().height;\n    this.activeSub = this.scrollSpyService.active$.pipe(takeUntil(this._destroy$), distinctUntilChanged()).subscribe(activeLink => {\n      this.activeLinkChange.emit(activeLink);\n      if (this.collapsible) {\n        this.styleCollapsibleElement();\n      }\n    });\n  }\n  ngAfterContentInit() {\n    this.scrollSpyService.addScrollspy({\n      id: this.id,\n      links: this.links\n    });\n  }\n  ngOnDestroy() {\n    this.scrollSpyService.removeScrollspy(this.id);\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n  styleCollapsibleElement() {\n    this._renderer.setStyle(this.host, 'overflow', 'hidden');\n    this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');\n    this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');\n    const hostSiblings = this.getAllSiblings(this.host);\n    const isAnySiblingActive = hostSiblings.some(element => {\n      return element.classList.contains('active');\n    });\n    if (this.collapsible && isAnySiblingActive) {\n      this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);\n    } else if (this.collapsible && !isAnySiblingActive) {\n      this._renderer.setStyle(this.host, 'height', '0px');\n    }\n  }\n  getAllSiblings(element) {\n    let siblings = [];\n    if (!element.parentNode) {\n      return siblings;\n    }\n    let sibling = element.parentNode.firstElementChild;\n    do {\n      if (sibling != element) {\n        siblings.push(sibling);\n      }\n    } while (sibling = sibling.nextElementSibling);\n    return siblings;\n  }\n}\n_class3 = MdbScrollspyDirective;\n_defineProperty(MdbScrollspyDirective, \"\\u0275fac\", function _class3_Factory(t) {\n  return new (t || _class3)(i0.ɵɵdirectiveInject(MdbScrollspyService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n});\n_defineProperty(MdbScrollspyDirective, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: _class3,\n  selectors: [[\"\", \"mdbScrollspy\", \"\"]],\n  contentQueries: function _class3_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MdbScrollspyLinkDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n    }\n  },\n  inputs: {\n    id: [\"mdbScrollspy\", \"id\"],\n    collapsible: \"collapsible\"\n  },\n  outputs: {\n    activeLinkChange: \"activeLinkChange\"\n  },\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  template: function _class3_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyDirective, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: '[mdbScrollspy]',\n      template: '<ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: MdbScrollspyService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    links: [{\n      type: ContentChildren,\n      args: [MdbScrollspyLinkDirective, {\n        descendants: true\n      }]\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspy']\n    }],\n    collapsible: [{\n      type: Input\n    }],\n    activeLinkChange: [{\n      type: Output\n    }]\n  });\n})();\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n    _defineProperty(this, \"_elementRef\", void 0);\n    _defineProperty(this, \"renderer\", void 0);\n    _defineProperty(this, \"ngZone\", void 0);\n    _defineProperty(this, \"scrollSpyService\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"container\", void 0);\n    _defineProperty(this, \"_scrollSpyId\", void 0);\n    _defineProperty(this, \"offset\", 0);\n    this._elementRef = _elementRef;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n  }\n  isElementInViewport() {\n    const scrollTop = this.container.scrollTop;\n    const elTop = this.host.offsetTop - this.offset;\n    const elHeight = this.host.offsetHeight;\n    return scrollTop >= elTop && scrollTop < elTop + elHeight;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.removeActiveLinks(scrollSpyId);\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(this.container, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.host.id;\n    if (!this.container) {\n      this.container = this._getClosestEl(this.host, '.scrollspy-container');\n    }\n    this.renderer.setStyle(this.container, 'position', 'relative');\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n  _getClosestEl(el, selector) {\n    for (; el && el !== document; el = el.parentNode) {\n      if (el.matches && el.matches(selector)) {\n        return el;\n      }\n    }\n    return null;\n  }\n}\n_class4 = MdbScrollspyElementDirective;\n_defineProperty(MdbScrollspyElementDirective, \"\\u0275fac\", function _class4_Factory(t) {\n  return new (t || _class4)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n});\n_defineProperty(MdbScrollspyElementDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _class4,\n  selectors: [[\"\", \"mdbScrollspyElement\", \"\"]],\n  inputs: {\n    container: \"container\",\n    scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"],\n    offset: \"offset\"\n  }\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyElementDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyElement]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    container: [{\n      type: Input\n    }],\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyElement']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyWindowDirective {\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  constructor(document, el, renderer, ngZone, scrollSpyService) {\n    _defineProperty(this, \"document\", void 0);\n    _defineProperty(this, \"el\", void 0);\n    _defineProperty(this, \"renderer\", void 0);\n    _defineProperty(this, \"ngZone\", void 0);\n    _defineProperty(this, \"scrollSpyService\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"_scrollSpyId\", void 0);\n    _defineProperty(this, \"offset\", 0);\n    this.document = document;\n    this.el = el;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n  }\n  isElementInViewport() {\n    const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n    const elHeight = this.el.nativeElement.offsetHeight;\n    const elTop = this.el.nativeElement.offsetTop - this.offset;\n    const elBottom = elTop + elHeight;\n    return scrollTop >= elTop && scrollTop <= elBottom;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    } else {\n      this.scrollSpyService.removeActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(window, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.el.nativeElement.id;\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n}\n_class5 = MdbScrollspyWindowDirective;\n_defineProperty(MdbScrollspyWindowDirective, \"\\u0275fac\", function _class5_Factory(t) {\n  return new (t || _class5)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n});\n_defineProperty(MdbScrollspyWindowDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _class5,\n  selectors: [[\"\", \"mdbScrollspyWindow\", \"\"]],\n  inputs: {\n    scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"],\n    offset: \"offset\"\n  }\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyWindowDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyWindow]'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyWindow']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyModule {}\n_class6 = MdbScrollspyModule;\n_defineProperty(MdbScrollspyModule, \"\\u0275fac\", function _class6_Factory(t) {\n  return new (t || _class6)();\n});\n_defineProperty(MdbScrollspyModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: _class6\n}));\n_defineProperty(MdbScrollspyModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MdbScrollspyService]\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      exports: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      providers: [MdbScrollspyService]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };","map":{"version":3,"names":["i0","Directive","Inject","Input","HostBinding","HostListener","Injectable","EventEmitter","Component","ContentChildren","Output","NgModule","DOCUMENT","takeUntil","distinctUntilChanged","Subject","coerceBooleanProperty","_c0","_c1","MdbScrollspyLinkDirective","scrollIntoView","_scrollIntoView","value","section","_section","constructor","cdRef","document","_defineProperty","id","_id","newId","onClick","detectChanges","assignSectionToId","documentElement","querySelector","ngOnInit","_class","_class_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","ɵɵdefineDirective","type","selectors","hostVars","hostBindings","_class_HostBindings","rf","ctx","ɵɵlistener","_class_click_HostBindingHandler","ɵɵclassProp","scrollspyLink","active","inputs","ngDevMode","ɵsetClassMetadata","args","selector","undefined","decorators","MdbScrollspyService","activeSubject","addScrollspy","scrollSpy","scrollSpys","push","removeScrollspy","scrollSpyId","scrollSpyIndex","findIndex","spy","splice","updateActiveState","activeLinkId","find","activeLink","links","link","setActiveLink","removeActiveState","next","removeActiveLinks","forEach","_class2","_class2_Factory","ɵɵdefineInjectable","token","factory","ɵfac","MdbScrollspyDirective","collapsible","_collapsible","scrollSpyService","_elementRef","_renderer","host","nativeElement","collapsibleElementHeight","getBoundingClientRect","height","activeSub","active$","pipe","_destroy$","subscribe","activeLinkChange","emit","styleCollapsibleElement","ngAfterContentInit","ngOnDestroy","complete","setStyle","hostSiblings","getAllSiblings","isAnySiblingActive","some","element","classList","contains","siblings","parentNode","sibling","firstElementChild","nextElementSibling","_class3","_class3_Factory","ElementRef","Renderer2","ɵɵdefineComponent","contentQueries","_class3_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","outputs","attrs","ngContentSelectors","decls","vars","template","_class3_Template","ɵɵprojectionDef","ɵɵprojection","encapsulation","descendants","MdbScrollspyElementDirective","_scrollSpyId","renderer","ngZone","isElementInViewport","scrollTop","container","elTop","offsetTop","offset","elHeight","offsetHeight","onScroll","listenToScroll","listen","_getClosestEl","runOutsideAngular","bind","ngAfterViewInit","setTimeout","el","matches","_class4","_class4_Factory","NgZone","MdbScrollspyWindowDirective","body","elBottom","window","_class5","_class5_Factory","MdbScrollspyModule","_class6","_class6_Factory","ɵɵdefineNgModule","ɵɵdefineInjector","providers","declarations","exports"],"sources":["C:/Users/Pierce T. Nyamuda/Documents/BYUI Courses/spring2023/Angular/final-project/frontend/node_modules/mdb-angular-ui-kit/fesm2022/mdb-angular-ui-kit-scrollspy.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nclass MdbScrollspyLinkDirective {\n    cdRef;\n    document;\n    get scrollIntoView() {\n        return this._scrollIntoView;\n    }\n    set scrollIntoView(value) {\n        this._scrollIntoView = value;\n    }\n    _scrollIntoView = true;\n    get section() {\n        return this._section;\n    }\n    set section(value) {\n        if (value) {\n            this._section = value;\n        }\n    }\n    _section;\n    _id;\n    constructor(cdRef, document) {\n        this.cdRef = cdRef;\n        this.document = document;\n    }\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    scrollspyLink = true;\n    active = false;\n    onClick() {\n        if (this.section && this.scrollIntoView === true) {\n            this.section.scrollIntoView();\n        }\n    }\n    detectChanges() {\n        this.cdRef.detectChanges();\n    }\n    assignSectionToId() {\n        this.section = this.document.documentElement.querySelector(`#${this.id}`);\n    }\n    ngOnInit() {\n        this.assignSectionToId();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyLinkDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbScrollspyLinkDirective, selector: \"[mdbScrollspyLink]\", inputs: { scrollIntoView: \"scrollIntoView\", id: [\"mdbScrollspyLink\", \"id\"] }, host: { listeners: { \"click\": \"onClick()\" }, properties: { \"class.scrollspy-link\": \"this.scrollspyLink\", \"class.active\": \"this.active\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyLinkDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyLink]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { scrollIntoView: [{\n                type: Input\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspyLink']\n            }], scrollspyLink: [{\n                type: HostBinding,\n                args: ['class.scrollspy-link']\n            }], active: [{\n                type: HostBinding,\n                args: ['class.active']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', []]\n            }] } });\n\nclass MdbScrollspyService {\n    scrollSpys = [];\n    activeSubject = new Subject();\n    active$ = this.activeSubject;\n    addScrollspy(scrollSpy) {\n        this.scrollSpys.push(scrollSpy);\n    }\n    removeScrollspy(scrollSpyId) {\n        const scrollSpyIndex = this.scrollSpys.findIndex((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        this.scrollSpys.splice(scrollSpyIndex, 1);\n    }\n    updateActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        this.setActiveLink(activeLink);\n    }\n    removeActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        if (!activeLink) {\n            return;\n        }\n        activeLink.active = false;\n        activeLink.detectChanges();\n    }\n    setActiveLink(activeLink) {\n        if (activeLink) {\n            activeLink.active = true;\n            activeLink.detectChanges();\n            this.activeSubject.next(activeLink);\n        }\n    }\n    removeActiveLinks(scrollSpyId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        scrollSpy.links.forEach((link) => {\n            link.active = false;\n            link.detectChanges();\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyService, decorators: [{\n            type: Injectable\n        }] });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n    scrollSpyService;\n    _elementRef;\n    _renderer;\n    links;\n    _destroy$ = new Subject();\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    _id;\n    get collapsible() {\n        return this._collapsible;\n    }\n    set collapsible(value) {\n        this._collapsible = coerceBooleanProperty(value);\n    }\n    _collapsible = false;\n    activeLinkChange = new EventEmitter();\n    activeSub;\n    constructor(scrollSpyService, _elementRef, _renderer) {\n        this.scrollSpyService = scrollSpyService;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n    }\n    get host() {\n        return this._elementRef.nativeElement;\n    }\n    collapsibleElementHeight = 0;\n    ngOnInit() {\n        this.collapsibleElementHeight = this.host.getBoundingClientRect().height;\n        this.activeSub = this.scrollSpyService.active$\n            .pipe(takeUntil(this._destroy$), distinctUntilChanged())\n            .subscribe((activeLink) => {\n            this.activeLinkChange.emit(activeLink);\n            if (this.collapsible) {\n                this.styleCollapsibleElement();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this.scrollSpyService.addScrollspy({ id: this.id, links: this.links });\n    }\n    ngOnDestroy() {\n        this.scrollSpyService.removeScrollspy(this.id);\n        this._destroy$.next();\n        this._destroy$.complete();\n    }\n    styleCollapsibleElement() {\n        this._renderer.setStyle(this.host, 'overflow', 'hidden');\n        this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');\n        this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');\n        const hostSiblings = this.getAllSiblings(this.host);\n        const isAnySiblingActive = hostSiblings.some((element) => {\n            return element.classList.contains('active');\n        });\n        if (this.collapsible && isAnySiblingActive) {\n            this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);\n        }\n        else if (this.collapsible && !isAnySiblingActive) {\n            this._renderer.setStyle(this.host, 'height', '0px');\n        }\n    }\n    getAllSiblings(element) {\n        let siblings = [];\n        if (!element.parentNode) {\n            return siblings;\n        }\n        let sibling = element.parentNode.firstElementChild;\n        do {\n            if (sibling != element) {\n                siblings.push(sibling);\n            }\n        } while ((sibling = sibling.nextElementSibling));\n        return siblings;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyDirective, deps: [{ token: MdbScrollspyService }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbScrollspyDirective, selector: \"[mdbScrollspy]\", inputs: { id: [\"mdbScrollspy\", \"id\"], collapsible: \"collapsible\" }, outputs: { activeLinkChange: \"activeLinkChange\" }, queries: [{ propertyName: \"links\", predicate: MdbScrollspyLinkDirective, descendants: true }], ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyDirective, decorators: [{\n            type: Component,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/component-selector\n                    selector: '[mdbScrollspy]',\n                    template: '<ng-content></ng-content>',\n                }]\n        }], ctorParameters: function () { return [{ type: MdbScrollspyService }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { links: [{\n                type: ContentChildren,\n                args: [MdbScrollspyLinkDirective, { descendants: true }]\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspy']\n            }], collapsible: [{\n                type: Input\n            }], activeLinkChange: [{\n                type: Output\n            }] } });\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n    _elementRef;\n    renderer;\n    ngZone;\n    scrollSpyService;\n    id;\n    get host() {\n        return this._elementRef.nativeElement;\n    }\n    container;\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    _scrollSpyId;\n    offset = 0;\n    constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n        this._elementRef = _elementRef;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n    }\n    isElementInViewport() {\n        const scrollTop = this.container.scrollTop;\n        const elTop = this.host.offsetTop - this.offset;\n        const elHeight = this.host.offsetHeight;\n        return scrollTop >= elTop && scrollTop < elTop + elHeight;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.removeActiveLinks(scrollSpyId);\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(this.container, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.host.id;\n        if (!this.container) {\n            this.container = this._getClosestEl(this.host, '.scrollspy-container');\n        }\n        this.renderer.setStyle(this.container, 'position', 'relative');\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n    _getClosestEl(el, selector) {\n        for (; el && el !== document; el = el.parentNode) {\n            if (el.matches && el.matches(selector)) {\n                return el;\n            }\n        }\n        return null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyElementDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbScrollspyElementDirective, selector: \"[mdbScrollspyElement]\", inputs: { container: \"container\", scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyElementDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyElement]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }]; }, propDecorators: { container: [{\n                type: Input\n            }], scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyElement']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyWindowDirective {\n    document;\n    el;\n    renderer;\n    ngZone;\n    scrollSpyService;\n    id;\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    _scrollSpyId;\n    offset = 0;\n    constructor(document, el, renderer, ngZone, scrollSpyService) {\n        this.document = document;\n        this.el = el;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n    }\n    isElementInViewport() {\n        const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n        const elHeight = this.el.nativeElement.offsetHeight;\n        const elTop = this.el.nativeElement.offsetTop - this.offset;\n        const elBottom = elTop + elHeight;\n        return scrollTop >= elTop && scrollTop <= elBottom;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n        else {\n            this.scrollSpyService.removeActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(window, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.el.nativeElement.id;\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyWindowDirective, deps: [{ token: DOCUMENT }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbScrollspyWindowDirective, selector: \"[mdbScrollspyWindow]\", inputs: { scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyWindowDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyWindow]',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }]; }, propDecorators: { scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyWindow']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyModule, declarations: [MdbScrollspyDirective,\n            MdbScrollspyLinkDirective,\n            MdbScrollspyElementDirective,\n            MdbScrollspyWindowDirective], exports: [MdbScrollspyDirective,\n            MdbScrollspyLinkDirective,\n            MdbScrollspyElementDirective,\n            MdbScrollspyWindowDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyModule, providers: [MdbScrollspyService] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    exports: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    providers: [MdbScrollspyService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}