{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/Pierce T. Nyamuda/Documents/BYUI Courses/spring2023/Angular/final-project/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UsersService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst user_model_1 = require(\"./user.model\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@auth0/angular-jwt\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i3 = tslib_1.__importStar(require(\"../files/file.service\"));\nconst i4 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i5 = tslib_1.__importStar(require(\"../app.service\"));\nclass UsersService {\n  constructor(jwtHelper, http, fileService, router, appService) {\n    this.jwtHelper = jwtHelper;\n    this.http = http;\n    this.fileService = fileService;\n    this.router = router;\n    this.appService = appService;\n    //current logged in user data\n    this.user = (0, core_1.signal)(new user_model_1.User());\n    //show a loader during an HTTP POST OR UPDATE request\n    this.isProcessingRequest = (0, core_1.signal)(false);\n  }\n  decodeJwtToken() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      //if the token exists\n      if (!!_this.getJwtToken()) {\n        let decodedToken = _this.jwtHelper.decodeToken(_this.getJwtToken());\n        //get user ID from the payload\n        let userId = decodedToken.userId;\n        //get all the full information about the user\n        _this.getUser(userId).subscribe(user => {\n          _this.user.set(user);\n        });\n      }\n    })();\n  }\n  getUser(id) {\n    const url = `http://localhost:8000/users/${id}`;\n    return this.http.get(url);\n  }\n  //Get access token from local storage\n  getJwtToken() {\n    //check if there is a token in session storage\n    let sessionToken = sessionStorage.getItem('jwt_token');\n    //check if there is a token in local storage\n    let localToken = localStorage.getItem('jwt_token');\n    //the current token\n    let token = sessionToken ? sessionToken : localToken ? localToken : '';\n    if (token) {\n      //if the token has not expired\n      if (!this.jwtHelper.isTokenExpired(token)) {\n        return token;\n      }\n      return '';\n    }\n    return '';\n  }\n  //Update user details\n  updateUser(id, newUser) {\n    //headers\n    let token = this.getJwtToken();\n    const headers = new http_1.HttpHeaders().set('Content-Type', 'application/json').set('Authorization', `Bearer ${token}`);\n    //show loader\n    this.isProcessingRequest.set(true);\n    let userDto = {\n      name: newUser.name,\n      email: newUser.email,\n      imageUrl: newUser.imageUrl\n    };\n    //first update the image\n    //and get the new imageUrl\n    this.fileService.updateImage(newUser.imageUrl).subscribe(imageUrl => {\n      //update the imageUrl\n      //if the returned imageUrl is null\n      //in case the user did not upload a new image\n      //assign the original imageUrl\n      userDto.imageUrl = !!imageUrl ? imageUrl : userDto.imageUrl;\n      //update the course\n      this.http.put(`http://localhost:8000/users/${id}`, userDto, {\n        headers\n      }).subscribe(response => {\n        //stop loader\n        this.isProcessingRequest.set(false);\n        //get the new user details\n        this.getUser(id).subscribe(user => {\n          this.appService.showSuccessToast('Your profile has been updated', '');\n          this.user.set(user);\n          this.router.navigateByUrl(`/account/${id}`);\n        });\n      }, error => {\n        //stop loader\n        this.isProcessingRequest.set(false);\n        //show toast\n        let errorMessage = error['error']['message'] ? error['error']['message'] : error['error']['error'];\n        if (errorMessage) {\n          this.appService.showFailureToast(errorMessage, '');\n        } else {\n          this.appService.showFailureToast('Please review your changes and try again.', 'Update failed');\n        }\n      });\n    });\n  }\n  //User placeholder image with the initials\n  //of the user inside the placeholder image\n  imagePlaceholderUrl(userName) {\n    if (userName) {\n      userName = userName.toUpperCase();\n      let placeholderUrl = 'https://placehold.co/600x400/000000/';\n      let initials = '';\n      //get the first initial\n      let words = userName.split(' ');\n      if (words.length == 1) {\n        initials += words[0][0];\n        //add a random color to the initial\n        //and add the initial to the image\n        let randomColor = this.generateRandomColorHexCode();\n        let fullUrl = `${placeholderUrl}${randomColor}?text=${initials}`;\n        return fullUrl;\n      }\n      //get two initials\n      if (words.length >= 2) {\n        initials += words[0][0];\n        initials += words[1][0];\n        //add a random color to the initials\n        //and add the initials to the image\n        let randomColor = this.generateRandomColorHexCode();\n        let fullUrl = `${placeholderUrl}${randomColor}?text=${initials}`;\n        return fullUrl;\n      }\n    }\n    return '../../assets/images/placeholder/placeholder1.png';\n  }\n  generateRandomColorHexCode() {\n    const hexCodes = [];\n    for (let i = 0; i < 10; i++) {\n      // Generate a random color by creating a random 6-character hex code\n      const randomColor = Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');\n      hexCodes.push(randomColor);\n    }\n    return hexCodes[0];\n  }\n}\n_class = UsersService;\n_class.ɵfac = function UsersService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.FileService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.AppService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.UsersService = UsersService;","map":{"version":3,"names":["core_1","require","user_model_1","http_1","UsersService","constructor","jwtHelper","http","fileService","router","appService","user","signal","User","isProcessingRequest","decodeJwtToken","_this","_asyncToGenerator","getJwtToken","decodedToken","decodeToken","userId","getUser","subscribe","set","id","url","get","sessionToken","sessionStorage","getItem","localToken","localStorage","token","isTokenExpired","updateUser","newUser","headers","HttpHeaders","userDto","name","email","imageUrl","updateImage","put","response","showSuccessToast","navigateByUrl","error","errorMessage","showFailureToast","imagePlaceholderUrl","userName","toUpperCase","placeholderUrl","initials","words","split","length","randomColor","generateRandomColorHexCode","fullUrl","hexCodes","i","Math","floor","random","toString","padStart","push","i0","ɵɵinject","i1","JwtHelperService","i2","HttpClient","i3","FileService","i4","Router","i5","AppService","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\users\\users.service.ts"],"sourcesContent":["import { Injectable, WritableSignal, signal } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { User } from './user.model';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FileService } from '../files/file.service';\nimport { Router } from '@angular/router';\nimport { AppService } from '../app.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersService {\n  //current logged in user data\n  public user: WritableSignal<User> = signal(new User());\n\n  //show a loader during an HTTP POST OR UPDATE request\n  public isProcessingRequest: WritableSignal<boolean> = signal(false);\n\n  constructor(\n    private jwtHelper: JwtHelperService,\n    private http: HttpClient,\n    private fileService: FileService,\n    private router: Router,\n    private appService: AppService\n  ) {}\n\n  public async decodeJwtToken() {\n    //if the token exists\n    if (!!this.getJwtToken()) {\n      let decodedToken = this.jwtHelper.decodeToken(this.getJwtToken());\n\n      //get user ID from the payload\n      let userId = decodedToken.userId;\n\n      //get all the full information about the user\n      this.getUser(userId).subscribe((user: User) => {\n        this.user.set(user);\n      });\n    }\n  }\n\n  public getUser(id: string): Observable<User> {\n    const url = `http://localhost:8000/users/${id}`;\n    return this.http.get<User>(url);\n  }\n\n  //Get access token from local storage\n  public getJwtToken(): string {\n    //check if there is a token in session storage\n    let sessionToken = sessionStorage.getItem('jwt_token');\n    //check if there is a token in local storage\n    let localToken = localStorage.getItem('jwt_token');\n\n    //the current token\n    let token = sessionToken ? sessionToken : localToken ? localToken : '';\n\n    if (token) {\n      //if the token has not expired\n      if (!this.jwtHelper.isTokenExpired(token)) {\n        return token;\n      }\n      return '';\n    }\n\n    return '';\n  }\n\n  //Update user details\n  updateUser(id: string, newUser: User) {\n    //headers\n    let token = this.getJwtToken();\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/json')\n      .set('Authorization', `Bearer ${token}`);\n    //show loader\n    this.isProcessingRequest.set(true);\n    let userDto = {\n      name: newUser.name,\n      email: newUser.email,\n      imageUrl: newUser.imageUrl,\n    };\n\n    //first update the image\n    //and get the new imageUrl\n    this.fileService.updateImage(newUser.imageUrl).subscribe((imageUrl) => {\n      //update the imageUrl\n      //if the returned imageUrl is null\n      //in case the user did not upload a new image\n      //assign the original imageUrl\n      userDto.imageUrl = !!imageUrl ? imageUrl : userDto.imageUrl;\n\n      //update the course\n      this.http\n        .put(`http://localhost:8000/users/${id}`, userDto, {\n          headers,\n        })\n        .subscribe(\n          (response) => {\n            //stop loader\n            this.isProcessingRequest.set(false);\n\n            //get the new user details\n            this.getUser(id).subscribe((user: User) => {\n              this.appService.showSuccessToast(\n                'Your profile has been updated',\n                ''\n              );\n\n              this.user.set(user);\n\n              this.router.navigateByUrl(`/account/${id}`);\n            });\n          },\n          (error) => {\n            //stop loader\n            this.isProcessingRequest.set(false);\n\n            //show toast\n            let errorMessage = error['error']['message']\n              ? error['error']['message']\n              : error['error']['error'];\n\n            if (errorMessage) {\n              this.appService.showFailureToast(errorMessage, '');\n            } else {\n              this.appService.showFailureToast(\n                'Please review your changes and try again.',\n                'Update failed'\n              );\n            }\n          }\n        );\n    });\n  }\n\n  //User placeholder image with the initials\n  //of the user inside the placeholder image\n  imagePlaceholderUrl(userName: string): string {\n    if (userName) {\n      userName = userName.toUpperCase();\n      let placeholderUrl = 'https://placehold.co/600x400/000000/';\n      let initials = '';\n      //get the first initial\n      let words = userName.split(' ');\n      if (words.length == 1) {\n        initials += words[0][0];\n\n        //add a random color to the initial\n        //and add the initial to the image\n        let randomColor = this.generateRandomColorHexCode();\n        let fullUrl = `${placeholderUrl}${randomColor}?text=${initials}`;\n        return fullUrl;\n      }\n      //get two initials\n      if (words.length >= 2) {\n        initials += words[0][0];\n        initials += words[1][0];\n\n        //add a random color to the initials\n        //and add the initials to the image\n        let randomColor = this.generateRandomColorHexCode();\n        let fullUrl = `${placeholderUrl}${randomColor}?text=${initials}`;\n        return fullUrl;\n      }\n    }\n\n    return '../../assets/images/placeholder/placeholder1.png';\n  }\n\n  generateRandomColorHexCode(): string {\n    const hexCodes: string[] = [];\n\n    for (let i = 0; i < 10; i++) {\n      // Generate a random color by creating a random 6-character hex code\n      const randomColor = Math.floor(Math.random() * 16777215)\n        .toString(16)\n        .padStart(6, '0');\n      hexCodes.push(randomColor);\n    }\n\n    return hexCodes[0];\n  }\n}\n"],"mappings":";;;;;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAEA,MAAAC,YAAA,GAAAD,OAAA;AAEA,MAAAE,MAAA,GAAAF,OAAA;;;;;;;AAKA,MAGaG,YAAY;EAOvBC,YACUC,SAA2B,EAC3BC,IAAgB,EAChBC,WAAwB,EACxBC,MAAc,EACdC,UAAsB;IAJtB,KAAAJ,SAAS,GAATA,SAAS;IACT,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,UAAU,GAAVA,UAAU;IAXpB;IACO,KAAAC,IAAI,GAAyB,IAAAX,MAAA,CAAAY,MAAM,EAAC,IAAIV,YAAA,CAAAW,IAAI,EAAE,CAAC;IAEtD;IACO,KAAAC,mBAAmB,GAA4B,IAAAd,MAAA,CAAAY,MAAM,EAAC,KAAK,CAAC;EAQhE;EAEUG,cAAcA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACzB;MACA,IAAI,CAAC,CAACD,KAAI,CAACE,WAAW,EAAE,EAAE;QACxB,IAAIC,YAAY,GAAGH,KAAI,CAACV,SAAS,CAACc,WAAW,CAACJ,KAAI,CAACE,WAAW,EAAE,CAAC;QAEjE;QACA,IAAIG,MAAM,GAAGF,YAAY,CAACE,MAAM;QAEhC;QACAL,KAAI,CAACM,OAAO,CAACD,MAAM,CAAC,CAACE,SAAS,CAAEZ,IAAU,IAAI;UAC5CK,KAAI,CAACL,IAAI,CAACa,GAAG,CAACb,IAAI,CAAC;QACrB,CAAC,CAAC;;IACH;EACH;EAEOW,OAAOA,CAACG,EAAU;IACvB,MAAMC,GAAG,GAAG,+BAA+BD,EAAE,EAAE;IAC/C,OAAO,IAAI,CAAClB,IAAI,CAACoB,GAAG,CAAOD,GAAG,CAAC;EACjC;EAEA;EACOR,WAAWA,CAAA;IAChB;IACA,IAAIU,YAAY,GAAGC,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC;IACtD;IACA,IAAIC,UAAU,GAAGC,YAAY,CAACF,OAAO,CAAC,WAAW,CAAC;IAElD;IACA,IAAIG,KAAK,GAAGL,YAAY,GAAGA,YAAY,GAAGG,UAAU,GAAGA,UAAU,GAAG,EAAE;IAEtE,IAAIE,KAAK,EAAE;MACT;MACA,IAAI,CAAC,IAAI,CAAC3B,SAAS,CAAC4B,cAAc,CAACD,KAAK,CAAC,EAAE;QACzC,OAAOA,KAAK;;MAEd,OAAO,EAAE;;IAGX,OAAO,EAAE;EACX;EAEA;EACAE,UAAUA,CAACV,EAAU,EAAEW,OAAa;IAClC;IACA,IAAIH,KAAK,GAAG,IAAI,CAACf,WAAW,EAAE;IAC9B,MAAMmB,OAAO,GAAG,IAAIlC,MAAA,CAAAmC,WAAW,EAAE,CAC9Bd,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CACvCA,GAAG,CAAC,eAAe,EAAE,UAAUS,KAAK,EAAE,CAAC;IAC1C;IACA,IAAI,CAACnB,mBAAmB,CAACU,GAAG,CAAC,IAAI,CAAC;IAClC,IAAIe,OAAO,GAAG;MACZC,IAAI,EAAEJ,OAAO,CAACI,IAAI;MAClBC,KAAK,EAAEL,OAAO,CAACK,KAAK;MACpBC,QAAQ,EAAEN,OAAO,CAACM;KACnB;IAED;IACA;IACA,IAAI,CAAClC,WAAW,CAACmC,WAAW,CAACP,OAAO,CAACM,QAAQ,CAAC,CAACnB,SAAS,CAAEmB,QAAQ,IAAI;MACpE;MACA;MACA;MACA;MACAH,OAAO,CAACG,QAAQ,GAAG,CAAC,CAACA,QAAQ,GAAGA,QAAQ,GAAGH,OAAO,CAACG,QAAQ;MAE3D;MACA,IAAI,CAACnC,IAAI,CACNqC,GAAG,CAAC,+BAA+BnB,EAAE,EAAE,EAAEc,OAAO,EAAE;QACjDF;OACD,CAAC,CACDd,SAAS,CACPsB,QAAQ,IAAI;QACX;QACA,IAAI,CAAC/B,mBAAmB,CAACU,GAAG,CAAC,KAAK,CAAC;QAEnC;QACA,IAAI,CAACF,OAAO,CAACG,EAAE,CAAC,CAACF,SAAS,CAAEZ,IAAU,IAAI;UACxC,IAAI,CAACD,UAAU,CAACoC,gBAAgB,CAC9B,+BAA+B,EAC/B,EAAE,CACH;UAED,IAAI,CAACnC,IAAI,CAACa,GAAG,CAACb,IAAI,CAAC;UAEnB,IAAI,CAACF,MAAM,CAACsC,aAAa,CAAC,YAAYtB,EAAE,EAAE,CAAC;QAC7C,CAAC,CAAC;MACJ,CAAC,EACAuB,KAAK,IAAI;QACR;QACA,IAAI,CAAClC,mBAAmB,CAACU,GAAG,CAAC,KAAK,CAAC;QAEnC;QACA,IAAIyB,YAAY,GAAGD,KAAK,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,GACxCA,KAAK,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,GACzBA,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;QAE3B,IAAIC,YAAY,EAAE;UAChB,IAAI,CAACvC,UAAU,CAACwC,gBAAgB,CAACD,YAAY,EAAE,EAAE,CAAC;SACnD,MAAM;UACL,IAAI,CAACvC,UAAU,CAACwC,gBAAgB,CAC9B,2CAA2C,EAC3C,eAAe,CAChB;;MAEL,CAAC,CACF;IACL,CAAC,CAAC;EACJ;EAEA;EACA;EACAC,mBAAmBA,CAACC,QAAgB;IAClC,IAAIA,QAAQ,EAAE;MACZA,QAAQ,GAAGA,QAAQ,CAACC,WAAW,EAAE;MACjC,IAAIC,cAAc,GAAG,sCAAsC;MAC3D,IAAIC,QAAQ,GAAG,EAAE;MACjB;MACA,IAAIC,KAAK,GAAGJ,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC;MAC/B,IAAID,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;QACrBH,QAAQ,IAAIC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvB;QACA;QACA,IAAIG,WAAW,GAAG,IAAI,CAACC,0BAA0B,EAAE;QACnD,IAAIC,OAAO,GAAG,GAAGP,cAAc,GAAGK,WAAW,SAASJ,QAAQ,EAAE;QAChE,OAAOM,OAAO;;MAEhB;MACA,IAAIL,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;QACrBH,QAAQ,IAAIC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvBD,QAAQ,IAAIC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvB;QACA;QACA,IAAIG,WAAW,GAAG,IAAI,CAACC,0BAA0B,EAAE;QACnD,IAAIC,OAAO,GAAG,GAAGP,cAAc,GAAGK,WAAW,SAASJ,QAAQ,EAAE;QAChE,OAAOM,OAAO;;;IAIlB,OAAO,kDAAkD;EAC3D;EAEAD,0BAA0BA,CAAA;IACxB,MAAME,QAAQ,GAAa,EAAE;IAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B;MACA,MAAMJ,WAAW,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,QAAQ,CAAC,CACrDC,QAAQ,CAAC,EAAE,CAAC,CACZC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACnBN,QAAQ,CAACO,IAAI,CAACV,WAAW,CAAC;;IAG5B,OAAOG,QAAQ,CAAC,CAAC,CAAC;EACpB;;SA1KW1D,YAAY;;mBAAZA,MAAY,EAAAkE,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,WAAA,GAAAP,EAAA,CAAAC,QAAA,CAAAO,EAAA,CAAAC,MAAA,GAAAT,EAAA,CAAAC,QAAA,CAAAS,EAAA,CAAAC,UAAA;AAAA;;SAAZ7E,MAAY;EAAA8E,OAAA,EAAZ9E,MAAY,CAAA+E,IAAA;EAAAC,UAAA,EAFX;AAAM;AADpBC,OAAA,CAAAjF,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}