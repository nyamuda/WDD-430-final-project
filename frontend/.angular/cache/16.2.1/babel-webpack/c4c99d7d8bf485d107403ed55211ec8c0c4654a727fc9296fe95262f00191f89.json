{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rightUserAuthGuard = exports.adminAuthGuard = exports.loggedInAuthGuard = void 0;\nconst router_1 = require(\"@angular/router\");\nconst auth_service_1 = require(\"./auth.service\");\nconst core_1 = require(\"@angular/core\");\nconst users_service_1 = require(\"../users/users.service\");\nconst login_service_1 = require(\"../login/login.service\");\n//Guard for logged in routes\nconst loggedInAuthGuard = (route, state) => {\n  const router = (0, core_1.inject)(router_1.Router);\n  const authService = (0, core_1.inject)(auth_service_1.AuthService);\n  const userService = (0, core_1.inject)(users_service_1.UsersService);\n  const loginService = (0, core_1.inject)(login_service_1.LoginService);\n  //if the user is logged in\n  if (authService.isAuthenticated()) {\n    //get full information about the user\n    //by decoding the Jwt access token\n    userService.decodeJwtToken();\n    return true;\n  }\n  // User is not authenticated, redirect to the login page\n  //and preserve the attempted URL by saving it\n  loginService.redirectUrl.set(state.url);\n  return router.createUrlTree(['/login']);\n};\nexports.loggedInAuthGuard = loggedInAuthGuard;\n//Guard for admin routes\nconst adminAuthGuard = (route, state) => {\n  const router = (0, core_1.inject)(router_1.Router);\n  const authService = (0, core_1.inject)(auth_service_1.AuthService);\n  const userService = (0, core_1.inject)(users_service_1.UsersService);\n  const loginService = (0, core_1.inject)(login_service_1.LoginService);\n  //if the user is logged in\n  if (authService.isAdmin()) {\n    //get full information about the user\n    //by decoding the Jwt access token\n    userService.decodeJwtToken();\n    return true;\n  }\n  // User is not admin redirect to the login page\n  //and preserve the attempted URL by saving it\n  loginService.redirectUrl.set(state.url);\n  return router.navigateByUrl('/login');\n};\nexports.adminAuthGuard = adminAuthGuard;\n/*Guard for the right user account routes\r\nExample: for a user to edit or see user details\r\nthe ID of the user from the token\r\nmust match the ID of the user they're trying to edit or see */\nconst rightUserAuthGuard = (route, state) => {\n  const router = (0, core_1.inject)(router_1.Router);\n  const authService = (0, core_1.inject)(auth_service_1.AuthService);\n  const userService = (0, core_1.inject)(users_service_1.UsersService);\n  const loginService = (0, core_1.inject)(login_service_1.LoginService);\n  const loggedInUserId = authService.getTokenInfo()['userId'];\n  const paramValue = route.params['id'];\n  //if the user is logged in and it's the right user\n  if (authService.isAuthenticated() && paramValue === loggedInUserId) {\n    //get full information about the user\n    //by decoding the Jwt access token\n    userService.decodeJwtToken();\n    return true;\n  }\n  // User is not admin redirect to the login page\n  //and preserve the attempted URL by saving it\n  loginService.redirectUrl.set(state.url);\n  return router.navigateByUrl('/login');\n};\nexports.rightUserAuthGuard = rightUserAuthGuard;","map":{"version":3,"names":["router_1","require","auth_service_1","core_1","users_service_1","login_service_1","loggedInAuthGuard","route","state","router","inject","Router","authService","AuthService","userService","UsersService","loginService","LoginService","isAuthenticated","decodeJwtToken","redirectUrl","set","url","createUrlTree","exports","adminAuthGuard","isAdmin","navigateByUrl","rightUserAuthGuard","loggedInUserId","getTokenInfo","paramValue","params"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import {\n  CanActivateFn,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { Observable } from 'rxjs';\nimport { Injectable, inject } from '@angular/core';\nimport { UsersService } from '../users/users.service';\nimport { LoginService } from '../login/login.service';\n\n//Guard for logged in routes\nexport const loggedInAuthGuard: CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot\n) => {\n  const router = inject(Router);\n  const authService = inject(AuthService);\n  const userService = inject(UsersService);\n  const loginService = inject(LoginService);\n\n  //if the user is logged in\n  if (authService.isAuthenticated()) {\n    //get full information about the user\n    //by decoding the Jwt access token\n    userService.decodeJwtToken();\n\n    return true;\n  }\n\n  // User is not authenticated, redirect to the login page\n  //and preserve the attempted URL by saving it\n  loginService.redirectUrl.set(state.url);\n  return router.createUrlTree(['/login']);\n};\n\n//Guard for admin routes\nexport const adminAuthGuard: CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot\n) => {\n  const router = inject(Router);\n  const authService = inject(AuthService);\n  const userService = inject(UsersService);\n  const loginService = inject(LoginService);\n\n  //if the user is logged in\n  if (authService.isAdmin()) {\n    //get full information about the user\n    //by decoding the Jwt access token\n    userService.decodeJwtToken();\n\n    return true;\n  }\n\n  // User is not admin redirect to the login page\n  //and preserve the attempted URL by saving it\n  loginService.redirectUrl.set(state.url);\n  return router.navigateByUrl('/login');\n};\n\n/*Guard for the right user account routes\nExample: for a user to edit or see user details\nthe ID of the user from the token\nmust match the ID of the user they're trying to edit or see */\nexport const rightUserAuthGuard: CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot\n) => {\n  const router = inject(Router);\n  const authService = inject(AuthService);\n  const userService = inject(UsersService);\n  const loginService = inject(LoginService);\n\n  const loggedInUserId = authService.getTokenInfo()['userId'];\n  const paramValue = route.params['id'];\n\n  //if the user is logged in and it's the right user\n  if (authService.isAuthenticated() && paramValue === loggedInUserId) {\n    //get full information about the user\n    //by decoding the Jwt access token\n    userService.decodeJwtToken();\n\n    return true;\n  }\n\n  // User is not admin redirect to the login page\n  //and preserve the attempted URL by saving it\n  loginService.redirectUrl.set(state.url);\n  return router.navigateByUrl('/login');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}