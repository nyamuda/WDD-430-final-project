{"ast":null,"code":"\"use strict\";\n\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BookingService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst core_1 = require(\"@angular/core\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"ngx-toastr\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/router\"));\nclass BookingService {\n  constructor(http, toastrService, router) {\n    this.http = http;\n    this.toastrService = toastrService;\n    this.router = router;\n    this.isBooking = (0, core_1.signal)(false);\n  }\n  book(booking) {\n    this.isBooking.set(true);\n    const url = 'http://localhost:8000/book';\n    const headers = new http_1.HttpHeaders().set('Content-Type', 'application/json');\n    this.http.post(url, booking, {\n      headers\n    }).subscribe(response => {\n      //show toast\n      this.showSuccess();\n      //disable loading button\n      this.isBooking.set(false);\n    }, error => {\n      //show toast\n      //show toast\n      let message = error['error']['message'] ? error['error']['message'] : error['error']['error'];\n      this.showFailure(message);\n      //disable loading button\n      this.isBooking.set(false);\n    });\n  }\n  //show success toast\n  showSuccess() {\n    this.toastrService.success(`You can now log in with your credentials.`, 'Registration Successful', {\n      timeOut: 10000\n      // progressAnimation: 'increasing',\n      // progressBar: true,\n    });\n  }\n  //show failure toast\n  showFailure(message) {\n    this.toastrService.error(`${message}`, 'Registration failed', {\n      timeOut: 10000\n      // progressAnimation: 'increasing',\n      // progressBar: true,\n    });\n  }\n}\n_class = BookingService;\n_class.ɵfac = function BookingService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.BookingService = BookingService;","map":{"version":3,"names":["http_1","require","core_1","BookingService","constructor","http","toastrService","router","isBooking","signal","book","booking","set","url","headers","HttpHeaders","post","subscribe","response","showSuccess","error","message","showFailure","success","timeOut","i0","ɵɵinject","i1","HttpClient","i2","ToastrService","i3","Router","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\homepage\\homepage-booking\\booking.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, WritableSignal, signal } from '@angular/core';\n\nimport { ToastrService } from 'ngx-toastr';\nimport { Booking } from './booking.model';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BookingService {\n  public isBooking: WritableSignal<boolean> = signal(false);\n\n  constructor(\n    private http: HttpClient,\n    private toastrService: ToastrService,\n    private router: Router\n  ) {}\n\n  book(booking: Booking) {\n    this.isBooking.set(true);\n\n    const url = 'http://localhost:8000/book';\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    this.http.post(url, booking, { headers }).subscribe(\n      (response) => {\n        //show toast\n        this.showSuccess();\n\n        //disable loading button\n        this.isBooking.set(false);\n      },\n      (error) => {\n        //show toast\n        //show toast\n        let message = error['error']['message']\n          ? error['error']['message']\n          : error['error']['error'];\n        this.showFailure(message);\n        //disable loading button\n        this.isBooking.set(false);\n      }\n    );\n  }\n\n  //show success toast\n  showSuccess() {\n    this.toastrService.success(\n      `You can now log in with your credentials.`,\n      'Registration Successful',\n      {\n        timeOut: 10000,\n        // progressAnimation: 'increasing',\n        // progressBar: true,\n      }\n    );\n  }\n\n  //show failure toast\n  showFailure(message: string) {\n    this.toastrService.error(`${message}`, 'Registration failed', {\n      timeOut: 10000,\n      // progressAnimation: 'increasing',\n      // progressBar: true,\n    });\n  }\n}\n"],"mappings":";;;;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;;;;;AAMA,MAGaE,cAAc;EAGzBC,YACUC,IAAgB,EAChBC,aAA4B,EAC5BC,MAAc;IAFd,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,MAAM,GAANA,MAAM;IALT,KAAAC,SAAS,GAA4B,IAAAN,MAAA,CAAAO,MAAM,EAAC,KAAK,CAAC;EAMtD;EAEHC,IAAIA,CAACC,OAAgB;IACnB,IAAI,CAACH,SAAS,CAACI,GAAG,CAAC,IAAI,CAAC;IAExB,MAAMC,GAAG,GAAG,4BAA4B;IACxC,MAAMC,OAAO,GAAG,IAAId,MAAA,CAAAe,WAAW,EAAE,CAACH,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,IAAI,CAACP,IAAI,CAACW,IAAI,CAACH,GAAG,EAAEF,OAAO,EAAE;MAAEG;IAAO,CAAE,CAAC,CAACG,SAAS,CAChDC,QAAQ,IAAI;MACX;MACA,IAAI,CAACC,WAAW,EAAE;MAElB;MACA,IAAI,CAACX,SAAS,CAACI,GAAG,CAAC,KAAK,CAAC;IAC3B,CAAC,EACAQ,KAAK,IAAI;MACR;MACA;MACA,IAAIC,OAAO,GAAGD,KAAK,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,GACnCA,KAAK,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,GACzBA,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;MAC3B,IAAI,CAACE,WAAW,CAACD,OAAO,CAAC;MACzB;MACA,IAAI,CAACb,SAAS,CAACI,GAAG,CAAC,KAAK,CAAC;IAC3B,CAAC,CACF;EACH;EAEA;EACAO,WAAWA,CAAA;IACT,IAAI,CAACb,aAAa,CAACiB,OAAO,CACxB,2CAA2C,EAC3C,yBAAyB,EACzB;MACEC,OAAO,EAAE;MACT;MACA;KACD,CACF;EACH;EAEA;EACAF,WAAWA,CAACD,OAAe;IACzB,IAAI,CAACf,aAAa,CAACc,KAAK,CAAC,GAAGC,OAAO,EAAE,EAAE,qBAAqB,EAAE;MAC5DG,OAAO,EAAE;MACT;MACA;KACD,CAAC;EACJ;;SAvDWrB,cAAc;;mBAAdA,MAAc,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;AAAA;;SAAd7B,MAAc;EAAA8B,OAAA,EAAd9B,MAAc,CAAA+B,IAAA;EAAAC,UAAA,EAFb;AAAM;AADpBC,OAAA,CAAAjC,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}