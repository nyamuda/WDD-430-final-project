{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/Pierce T. Nyamuda/Documents/BYUI Courses/spring2023/Angular/final-project/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GalleryService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst app_meta_1 = require(\"../app.meta\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"../files/file.service\"));\nconst i2 = tslib_1.__importStar(require(\"../app.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i4 = tslib_1.__importStar(require(\"../users/users.service\"));\nconst i5 = tslib_1.__importStar(require(\"@angular/router\"));\nclass GalleryService {\n  constructor(fileService, appService, http, userService, router) {\n    this.fileService = fileService;\n    this.appService = appService;\n    this.http = http;\n    this.userService = userService;\n    this.router = router;\n    this._gallery = [];\n    this.galleryListSignal = (0, core_1.signal)(this._gallery);\n    this.isUploadingItemSignal = (0, core_1.signal)(false);\n    this.metaDataSignal = (0, core_1.signal)(new app_meta_1.MetaData(1, 1, 1));\n    this.pageNumberSignal = (0, core_1.signal)(1);\n  }\n  uploadGalleryItem() {\n    //show the loader\n    this.isUploadingItemSignal.set(true);\n    //set headers\n    let token = this.userService.getJwtToken();\n    const headers = new http_1.HttpHeaders().set('Content-Type', 'application/json').set('Authorization', `Bearer ${token}`);\n    //upload the image and get the Firebase image Url\n    this.fileService.uploadImage().subscribe(imageUrl => {\n      let url = 'http://localhost:8000/gallery';\n      let galleryImageDto = {\n        url: imageUrl,\n        type: 'image'\n      };\n      //the save the image url to MongoDB database\n      this.http.post(url, galleryImageDto, {\n        headers\n      }).subscribe(response => {\n        this.appService.showSuccessToast('Image successfully uploaded!');\n        this.getGalleryItems();\n        //stop the loader\n        this.isUploadingItemSignal.set(false);\n      }, error => {\n        this.appService.showFailureToast('Something went wrong. Please try again later.');\n        //stop the loader\n        this.isUploadingItemSignal.set(false);\n      });\n    });\n  }\n  getGalleryItems() {\n    const url = `http://localhost:8000/gallery/?page=${this.pageNumberSignal()}`;\n    this.http.get(url).subscribe(response => {\n      this._gallery = response.items;\n      this.galleryListSignal.set(this._gallery);\n      //meta data for pagination\n      let meta = new app_meta_1.MetaData(response.meta.totalItems, response.meta.currentPage, response.meta.pageSize);\n      this.metaDataSignal.set(meta);\n    }, error => {\n      console.log(error);\n    });\n  }\n  deleteGalleryItem(id, itemUrl) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      //first delete the image from Firebase\n      yield _this.fileService.deleteImage(itemUrl);\n      //then delete its url from MongoDB\n      //set headers\n      let token = _this.userService.getJwtToken();\n      const headers = new http_1.HttpHeaders().set('Authorization', `Bearer ${token}`);\n      const url = `http://localhost:8000/gallery/${id}`;\n      _this.http.delete(url, {\n        headers\n      }).subscribe(response => {\n        _this.getGalleryItems();\n        _this.appService.showSuccessToast('The file has been deleted.', 'Success!');\n      }, error => {\n        _this.appService.showFailureToast('There was an error during the course deletion process.', 'File deletion failed');\n      });\n    })();\n  }\n}\n_class = GalleryService;\n_class.ɵfac = function GalleryService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.FileService), i0.ɵɵinject(i2.AppService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.UsersService), i0.ɵɵinject(i5.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.GalleryService = GalleryService;","map":{"version":3,"names":["core_1","require","http_1","app_meta_1","GalleryService","constructor","fileService","appService","http","userService","router","_gallery","galleryListSignal","signal","isUploadingItemSignal","metaDataSignal","MetaData","pageNumberSignal","uploadGalleryItem","set","token","getJwtToken","headers","HttpHeaders","uploadImage","subscribe","imageUrl","url","galleryImageDto","type","post","response","showSuccessToast","getGalleryItems","error","showFailureToast","get","items","meta","totalItems","currentPage","pageSize","console","log","deleteGalleryItem","id","itemUrl","_this","_asyncToGenerator","deleteImage","delete","i0","ɵɵinject","i1","FileService","i2","AppService","i3","HttpClient","i4","UsersService","i5","Router","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\gallery\\gallery.service.ts"],"sourcesContent":["import { Injectable, signal, WritableSignal } from '@angular/core';\nimport { FileService } from '../files/file.service';\nimport { AppService } from '../app.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { UsersService } from '../users/users.service';\nimport { GalleryMetaDto, SchoolGalleryItem } from './schoolGalleryItem.model';\nimport { Router } from '@angular/router';\nimport { MetaData } from '../app.meta';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GalleryService {\n  private _gallery: SchoolGalleryItem[] = [];\n  public galleryListSignal: WritableSignal<SchoolGalleryItem[]> = signal(\n    this._gallery\n  );\n  public isUploadingItemSignal: WritableSignal<boolean> = signal(false);\n  public metaDataSignal: WritableSignal<MetaData> = signal(\n    new MetaData(1, 1, 1)\n  );\n\n  public pageNumberSignal: WritableSignal<number> = signal(1);\n\n  constructor(\n    private fileService: FileService,\n    private appService: AppService,\n    private http: HttpClient,\n    private userService: UsersService,\n    private router: Router\n  ) {}\n\n  uploadGalleryItem() {\n    //show the loader\n    this.isUploadingItemSignal.set(true);\n    //set headers\n    let token = this.userService.getJwtToken();\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/json')\n      .set('Authorization', `Bearer ${token}`);\n\n    //upload the image and get the Firebase image Url\n    this.fileService.uploadImage().subscribe((imageUrl: string) => {\n      let url = 'http://localhost:8000/gallery';\n      let galleryImageDto = {\n        url: imageUrl,\n        type: 'image',\n      };\n\n      //the save the image url to MongoDB database\n      this.http.post(url, galleryImageDto, { headers }).subscribe(\n        (response) => {\n          this.appService.showSuccessToast('Image successfully uploaded!');\n          this.getGalleryItems();\n          //stop the loader\n          this.isUploadingItemSignal.set(false);\n        },\n        (error) => {\n          this.appService.showFailureToast(\n            'Something went wrong. Please try again later.'\n          );\n          //stop the loader\n          this.isUploadingItemSignal.set(false);\n        }\n      );\n    });\n  }\n\n  getGalleryItems() {\n    const url = `http://localhost:8000/gallery/?page=${this.pageNumberSignal()}`;\n    this.http.get<GalleryMetaDto>(url).subscribe(\n      (response: GalleryMetaDto) => {\n        this._gallery = response.items;\n        this.galleryListSignal.set(this._gallery);\n\n        //meta data for pagination\n        let meta = new MetaData(\n          response.meta.totalItems,\n          response.meta.currentPage,\n          response.meta.pageSize\n        );\n        this.metaDataSignal.set(meta);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  async deleteGalleryItem(id: string, itemUrl: string) {\n    //first delete the image from Firebase\n    await this.fileService.deleteImage(itemUrl);\n\n    //then delete its url from MongoDB\n    //set headers\n    let token = this.userService.getJwtToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    const url = `http://localhost:8000/gallery/${id}`;\n    this.http.delete(url, { headers }).subscribe(\n      (response) => {\n        this.getGalleryItems();\n        this.appService.showSuccessToast(\n          'The file has been deleted.',\n          'Success!'\n        );\n      },\n      (error) => {\n        this.appService.showFailureToast(\n          'There was an error during the course deletion process.',\n          'File deletion failed'\n        );\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}