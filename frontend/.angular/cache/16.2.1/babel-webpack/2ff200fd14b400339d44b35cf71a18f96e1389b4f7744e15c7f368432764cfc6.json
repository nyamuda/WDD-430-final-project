{"ast":null,"code":"\"use strict\";\n\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoginService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst user_model_1 = require(\"../users/user.model\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i3 = tslib_1.__importStar(require(\"../users/users.service\"));\nconst i4 = tslib_1.__importStar(require(\"../app.service\"));\nclass LoginService {\n  constructor(http, router, userService, appService) {\n    this.http = http;\n    this.router = router;\n    this.userService = userService;\n    this.appService = appService;\n    this.isLoggingIn = (0, core_1.signal)(false); // show loading button;\n    this.rememberMe = (0, core_1.signal)(false); // remember me on log in\n    //redirect URL if log in is a success\n    //default is the homepage\n    this.redirectUrl = (0, core_1.signal)('');\n  }\n  login(newUser) {\n    this.isLoggingIn.set(true);\n    let userDto = {\n      email: newUser.email.trim(),\n      password: newUser.password.trim()\n    };\n    const url = 'http://localhost:8000/login';\n    const headers = new http_1.HttpHeaders().set('Content-Type', 'application/json');\n    this.http.post(url, userDto, {\n      headers\n    }).subscribe(response => {\n      //if the user wants to be be remembered on log in\n      //save the JWT token to local storage\n      if (this.rememberMe) {\n        localStorage.setItem('jwt_token', response['token']);\n      }\n      //else save the JWT token to session storage\n      else {\n        sessionStorage.setItem('jwt_token', response['token']);\n      }\n      //disable loading button\n      this.isLoggingIn.set(false);\n      //load the user information to the user service\n      //by decoding the access token\n      this.userService.decodeJwtToken();\n      this.appService.showSuccessToast('Login successful!', '');\n      //navigate the user\n      this.router.navigateByUrl(this.redirectUrl());\n    }, error => {\n      //disable loading button\n      this.isLoggingIn.set(false);\n      //show toast\n      let errorMessage = error['error']['message'] ? error['error']['message'] : error['error']['error'] ? error['error']['error'] : 'Please review your login credentials and try again.';\n      this.appService.showFailureToast(errorMessage, 'Login failed');\n    });\n  }\n  // When the user logs out\n  logout() {\n    localStorage.removeItem('jwt_token');\n    sessionStorage.removeItem('jwt_token');\n    //clear the stored information about the user\n    this.userService.user.set(new user_model_1.User());\n    this.appService.showSuccessToast(\"You've been logged out\", '');\n    this.router.navigateByUrl('/home');\n  }\n}\n_class = LoginService;\n_class.ɵfac = function LoginService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.UsersService), i0.ɵɵinject(i4.AppService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.LoginService = LoginService;","map":{"version":3,"names":["core_1","require","user_model_1","http_1","LoginService","constructor","http","router","userService","appService","isLoggingIn","signal","rememberMe","redirectUrl","login","newUser","set","userDto","email","trim","password","url","headers","HttpHeaders","post","subscribe","response","localStorage","setItem","sessionStorage","decodeJwtToken","showSuccessToast","navigateByUrl","error","errorMessage","showFailureToast","logout","removeItem","user","User","i0","ɵɵinject","i1","HttpClient","i2","Router","i3","UsersService","i4","AppService","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\login\\login.service.ts"],"sourcesContent":["import { Injectable, WritableSignal, signal } from '@angular/core';\nimport { User } from '../users/user.model';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Router } from '@angular/router';\nimport { UsersService } from '../users/users.service';\nimport { AppService } from '../app.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginService {\n  isLoggingIn: WritableSignal<boolean> = signal(false); // show loading button;\n  rememberMe: WritableSignal<boolean> = signal(false); // remember me on log in\n  //redirect URL if log in is a success\n  //default is the homepage\n  redirectUrl: WritableSignal<string> = signal('');\n\n  constructor(\n    private http: HttpClient,\n\n    private router: Router,\n\n    private userService: UsersService,\n    private appService: AppService\n  ) {}\n\n  login(newUser: User) {\n    this.isLoggingIn.set(true);\n\n    let userDto = {\n      email: newUser.email.trim(),\n      password: newUser.password.trim(),\n    };\n    const url = 'http://localhost:8000/login';\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    this.http.post(url, userDto, { headers }).subscribe(\n      (response) => {\n        //if the user wants to be be remembered on log in\n        //save the JWT token to local storage\n        if (this.rememberMe) {\n          localStorage.setItem('jwt_token', response['token']);\n        }\n        //else save the JWT token to session storage\n        else {\n          sessionStorage.setItem('jwt_token', response['token']);\n        }\n\n        //disable loading button\n        this.isLoggingIn.set(false);\n\n        //load the user information to the user service\n        //by decoding the access token\n        this.userService.decodeJwtToken();\n\n        this.appService.showSuccessToast('Login successful!', '');\n\n        //navigate the user\n        this.router.navigateByUrl(this.redirectUrl());\n      },\n      (error) => {\n        //disable loading button\n        this.isLoggingIn.set(false);\n\n        //show toast\n        let errorMessage = error['error']['message']\n          ? error['error']['message']\n          : error['error']['error']\n          ? error['error']['error']\n          : 'Please review your login credentials and try again.';\n\n        this.appService.showFailureToast(errorMessage, 'Login failed');\n      }\n    );\n  }\n\n  // When the user logs out\n  logout() {\n    localStorage.removeItem('jwt_token');\n    sessionStorage.removeItem('jwt_token');\n    //clear the stored information about the user\n    this.userService.user.set(new User());\n    this.appService.showSuccessToast(\"You've been logged out\", '');\n    this.router.navigateByUrl('/home');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}