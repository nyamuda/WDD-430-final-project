{"ast":null,"code":"\"use strict\";\n\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"../login/login.service\"));\nconst i2 = tslib_1.__importStar(require(\"@auth0/angular-jwt\"));\nconst i3 = tslib_1.__importStar(require(\"../users/users.service\"));\nclass AuthService {\n  constructor(loginService, jwtHelper, userService) {\n    this.loginService = loginService;\n    this.jwtHelper = jwtHelper;\n    this.userService = userService;\n  }\n  isAuthenticated() {\n    //get the current access token\n    let token = this.userService.getJwtToken();\n    //if token doesn't' exist\n    //the user is not logged in\n    if (!token) {\n      return false;\n    }\n    return true;\n  }\n  //check if its the admin\n  isAdmin() {\n    //get the current access token\n    let token = this.userService.getJwtToken();\n    //if token doesn't' exist\n    //the user is not logged in\n    if (!token) {\n      return false;\n    }\n    //decode the token and check it the user is an admin\n    let decodedToken = this.jwtHelper.decodeToken(token);\n    return decodedToken.isAdmin;\n  }\n  //get user access token\n  //check if its the admin\n  getTokenInfo() {\n    if (this.isAuthenticated()) {\n      let token = this.userService.getJwtToken();\n      return this.jwtHelper.decodeToken(token);\n    }\n    return '';\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.UsersService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.AuthService = AuthService;","map":{"version":3,"names":["AuthService","constructor","loginService","jwtHelper","userService","isAuthenticated","token","getJwtToken","isAdmin","decodedToken","decodeToken","getTokenInfo","i0","ɵɵinject","i1","LoginService","i2","JwtHelperService","i3","UsersService","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable, WritableSignal, Signal } from '@angular/core';\nimport { LoginService } from '../login/login.service';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { UsersService } from '../users/users.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(\n    private loginService: LoginService,\n    private jwtHelper: JwtHelperService,\n    private userService: UsersService\n  ) {}\n\n  isAuthenticated(): boolean {\n    //get the current access token\n    let token = this.userService.getJwtToken();\n\n    //if token doesn't' exist\n    //the user is not logged in\n    if (!token) {\n      return false;\n    }\n\n    return true;\n  }\n  //check if its the admin\n  isAdmin(): boolean {\n    //get the current access token\n    let token = this.userService.getJwtToken();\n\n    //if token doesn't' exist\n    //the user is not logged in\n    if (!token) {\n      return false;\n    }\n\n    //decode the token and check it the user is an admin\n    let decodedToken = this.jwtHelper.decodeToken(token);\n\n    return decodedToken.isAdmin;\n  }\n\n  //get user access token\n  //check if its the admin\n  getTokenInfo(): string {\n    if (this.isAuthenticated()) {\n      let token = this.userService.getJwtToken();\n      return this.jwtHelper.decodeToken(token);\n    }\n    return '';\n  }\n}\n"],"mappings":";;;;;;;;;;;;AAKA,MAGaA,WAAW;EACtBC,YACUC,YAA0B,EAC1BC,SAA2B,EAC3BC,WAAyB;IAFzB,KAAAF,YAAY,GAAZA,YAAY;IACZ,KAAAC,SAAS,GAATA,SAAS;IACT,KAAAC,WAAW,GAAXA,WAAW;EAClB;EAEHC,eAAeA,CAAA;IACb;IACA,IAAIC,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,WAAW,EAAE;IAE1C;IACA;IACA,IAAI,CAACD,KAAK,EAAE;MACV,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb;EACA;EACAE,OAAOA,CAAA;IACL;IACA,IAAIF,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,WAAW,EAAE;IAE1C;IACA;IACA,IAAI,CAACD,KAAK,EAAE;MACV,OAAO,KAAK;;IAGd;IACA,IAAIG,YAAY,GAAG,IAAI,CAACN,SAAS,CAACO,WAAW,CAACJ,KAAK,CAAC;IAEpD,OAAOG,YAAY,CAACD,OAAO;EAC7B;EAEA;EACA;EACAG,YAAYA,CAAA;IACV,IAAI,IAAI,CAACN,eAAe,EAAE,EAAE;MAC1B,IAAIC,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,WAAW,EAAE;MAC1C,OAAO,IAAI,CAACJ,SAAS,CAACO,WAAW,CAACJ,KAAK,CAAC;;IAE1C,OAAO,EAAE;EACX;;SA5CWN,WAAW;;mBAAXA,MAAW,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,gBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,YAAA;AAAA;;SAAXnB,MAAW;EAAAoB,OAAA,EAAXpB,MAAW,CAAAqB,IAAA;EAAAC,UAAA,EAFV;AAAM;AADpBC,OAAA,CAAAvB,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}