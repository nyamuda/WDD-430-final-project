{"ast":null,"code":"\"use strict\";\n\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst http_1 = require(\"@angular/common/http\");\nconst rxjs_2 = require(\"rxjs\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"@auth0/angular-jwt\"));\nclass FileService {\n  constructor(http, jwtHelper) {\n    this.http = http;\n    this.jwtHelper = jwtHelper;\n    //current uploaded image\n    this.currentUpload = (0, core_1.signal)([]);\n    //validity of the file\n    this.isFileInvalid = (0, core_1.signal)(false);\n    //clear the file form once a request is successful\n    this.clearUploadForm = new rxjs_2.BehaviorSubject(false);\n  }\n  //Upload image\n  //returns image URL\n  uploadImage() {\n    //if an image has been uploaded\n    if (this.currentUpload().length > 0 && !!this.currentUpload()[0]) {\n      const formData = new FormData(); // Create a new FormData object\n      formData.append('file', this.currentUpload()[0]); // Append the file to the form data\n      const url = `http://localhost:8000/files`;\n      let token = this.getJwtToken();\n      const headers = new http_1.HttpHeaders().set('Authorization', `Bearer ${token}`);\n      let options = {\n        headers: headers\n      };\n      return this.http.post(url, formData, options).pipe((0, rxjs_1.map)(response => {\n        this.currentUpload.set([]); //clear the uploaded image\n        this.clearUploadForm.next(true); //clear upload form\n        return response['downloadURL']; // Return the response data\n      }), (0, rxjs_1.catchError)(error => {\n        // Handle errors if needed\n        console.error('Error uploading course image:', error);\n        return (0, rxjs_1.of)(null);\n      }));\n    }\n    //else return null\n    else {\n      return (0, rxjs_1.of)(null);\n    }\n  }\n  //Update image\n  //by deleting the old image -- using the imageUrl\n  //and returns the downloadURL of the new image\n  updateImage(oldImageUrl) {\n    if (this.currentUpload().length > 0 && !!this.currentUpload()[0]) {\n      const formData = new FormData(); // Create a new FormData object\n      formData.append('file', this.currentUpload()[0]); // Append the file to the form data\n      formData.append('imageUrl', oldImageUrl);\n      const url = `http://localhost:8000/files`;\n      // Create the options object with headers and body\n      let token = this.getJwtToken();\n      const headers = new http_1.HttpHeaders().set('Authorization', `Bearer ${token}`);\n      const options = {\n        headers: headers,\n        body: {\n          imageUrl: oldImageUrl\n        }\n      };\n      //checking if the imageUrl is null\n      if (!oldImageUrl) {\n        return this.uploadImage();\n      }\n      //1. Delete the old image using its URL\n      return this.http.delete(url, options).pipe((0, rxjs_1.switchMap)(response => {\n        //2. Store the new image and get its download URL\n        return this.uploadImage();\n      }), (0, rxjs_1.catchError)(error => {\n        //if the image trying to be deleted does not exists\n        //processed with uploading a new image\n        if (error.status === 404) {\n          return this.uploadImage();\n        }\n        console.error('Error updating course image:', error);\n        return (0, rxjs_1.of)(null);\n      }));\n    }\n    //else return null\n    else {\n      return (0, rxjs_1.of)(null);\n    }\n  }\n  //Delete image using its URL\n  deleteImage(imageUrl) {\n    const url = `http://localhost:8000/files`;\n    // Create the options object with headers and body\n    let token = this.getJwtToken();\n    const headers = new http_1.HttpHeaders().set('Authorization', `Bearer ${token}`);\n    const options = {\n      headers: headers,\n      body: {\n        imageUrl\n      }\n    };\n    this.http.delete(url, options).subscribe(response => {\n      //the the upload form\n      this.clearUploadForm.next(true);\n    }, error => {\n      console.log(error);\n    });\n  }\n  //Get access token from local storage\n  getJwtToken() {\n    //check if there is a token in session storage\n    let sessionToken = sessionStorage.getItem('jwt_token');\n    //check if there is a token in local storage\n    let localToken = localStorage.getItem('jwt_token');\n    //the current token\n    let token = sessionToken ? sessionToken : localToken ? localToken : '';\n    if (token) {\n      //if the token has not expired\n      if (!this.jwtHelper.isTokenExpired(token)) {\n        return token;\n      }\n      return '';\n    }\n    return '';\n  }\n}\n_class = FileService;\n_class.ɵfac = function FileService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.FileService = FileService;","map":{"version":3,"names":["core_1","require","rxjs_1","http_1","rxjs_2","FileService","constructor","http","jwtHelper","currentUpload","signal","isFileInvalid","clearUploadForm","BehaviorSubject","uploadImage","length","formData","FormData","append","url","token","getJwtToken","headers","HttpHeaders","set","options","post","pipe","map","response","next","catchError","error","console","of","updateImage","oldImageUrl","body","imageUrl","delete","switchMap","status","deleteImage","subscribe","log","sessionToken","sessionStorage","getItem","localToken","localStorage","isTokenExpired","i0","ɵɵinject","i1","HttpClient","i2","JwtHelperService","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\files\\file.service.ts"],"sourcesContent":["import { Injectable, WritableSignal, signal } from '@angular/core';\nimport { map, Observable, of, catchError, switchMap } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { UsersService } from '../users/users.service';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FileService {\n  //current uploaded image\n  currentUpload: WritableSignal<File[]> = signal([]);\n  //validity of the file\n  isFileInvalid: WritableSignal<boolean> = signal(false);\n\n  //clear the file form once a request is successful\n  clearUploadForm: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\n    false\n  );\n\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService) {}\n\n  //Upload image\n  //returns image URL\n  uploadImage(): Observable<string> {\n    //if an image has been uploaded\n    if (this.currentUpload().length > 0 && !!this.currentUpload()[0]) {\n      const formData = new FormData(); // Create a new FormData object\n      formData.append('file', this.currentUpload()[0]); // Append the file to the form data\n\n      const url = `http://localhost:8000/files`;\n\n      let token = this.getJwtToken();\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n      let options = {\n        headers: headers,\n      };\n\n      return this.http.post(url, formData, options).pipe(\n        map((response) => {\n          this.currentUpload.set([]); //clear the uploaded image\n          this.clearUploadForm.next(true); //clear upload form\n          return response['downloadURL']; // Return the response data\n        }),\n        catchError((error) => {\n          // Handle errors if needed\n          console.error('Error uploading course image:', error);\n          return of(null);\n        })\n      );\n    }\n    //else return null\n    else {\n      return of(null);\n    }\n  }\n\n  //Update image\n  //by deleting the old image -- using the imageUrl\n  //and returns the downloadURL of the new image\n  updateImage(oldImageUrl: string): Observable<string> {\n    if (this.currentUpload().length > 0 && !!this.currentUpload()[0]) {\n      const formData = new FormData(); // Create a new FormData object\n      formData.append('file', this.currentUpload()[0]); // Append the file to the form data\n\n      formData.append('imageUrl', oldImageUrl);\n\n      const url = `http://localhost:8000/files`;\n\n      // Create the options object with headers and body\n      let token = this.getJwtToken();\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n      const options = {\n        headers: headers,\n        body: {\n          imageUrl: oldImageUrl,\n        },\n      };\n\n      //checking if the imageUrl is null\n      if (!oldImageUrl) {\n        return this.uploadImage();\n      }\n\n      //1. Delete the old image using its URL\n      return this.http.delete(url, options).pipe(\n        switchMap((response) => {\n          //2. Store the new image and get its download URL\n          return this.uploadImage();\n        }),\n        catchError((error) => {\n          //if the image trying to be deleted does not exists\n          //processed with uploading a new image\n          if (error.status === 404) {\n            return this.uploadImage();\n          }\n          console.error('Error updating course image:', error);\n          return of(null);\n        })\n      );\n    }\n    //else return null\n    else {\n      return of(null);\n    }\n  }\n\n  //Delete image using its URL\n  deleteImage(imageUrl: string) {\n    const url = `http://localhost:8000/files`;\n\n    // Create the options object with headers and body\n    let token = this.getJwtToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    const options = {\n      headers: headers,\n      body: {\n        imageUrl,\n      },\n    };\n\n    this.http.delete(url, options).subscribe(\n      (response) => {\n        //the the upload form\n        this.clearUploadForm.next(true);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  //Get access token from local storage\n  public getJwtToken(): string {\n    //check if there is a token in session storage\n    let sessionToken = sessionStorage.getItem('jwt_token');\n    //check if there is a token in local storage\n    let localToken = localStorage.getItem('jwt_token');\n\n    //the current token\n    let token = sessionToken ? sessionToken : localToken ? localToken : '';\n\n    if (token) {\n      //if the token has not expired\n      if (!this.jwtHelper.isTokenExpired(token)) {\n        return token;\n      }\n      return '';\n    }\n\n    return '';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}