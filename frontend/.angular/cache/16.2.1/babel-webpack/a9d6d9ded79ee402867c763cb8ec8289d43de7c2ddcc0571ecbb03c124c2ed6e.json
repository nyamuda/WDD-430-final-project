{"ast":null,"code":"\"use strict\";\n\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReviewsService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst app_meta_1 = require(\"../app.meta\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"../app.service\"));\nconst i3 = tslib_1.__importStar(require(\"../users/users.service\"));\nclass ReviewsService {\n  constructor(http, appService, userService) {\n    this.http = http;\n    this.appService = appService;\n    this.userService = userService;\n    this._reviews = new Array();\n    //meta data for pagination\n    this._metaData = new app_meta_1.MetaData(0, 0, 0);\n    //Signals\n    this.reviewListSignal = (0, core_1.signal)(this._reviews);\n    this.metaDataSignal = (0, core_1.signal)(this._metaData);\n    this.courseIdSignal = (0, core_1.signal)('');\n    //display placeholder reviews\n    //in case its fetching reviews\n    this.isFetchingReviews = (0, core_1.signal)(false);\n    //information about the logged in user\n    this.loggedInUser = (0, core_1.computed)(() => this.userService.user());\n  }\n  // CREATE\n  addReview(courseId, newReview) {\n    if (!!newReview) {\n      const url = 'http://localhost:8000/reviews';\n      const headers = this.headers();\n      let reviewDto = {\n        content: newReview.content,\n        userId: this.loggedInUser()['_id'],\n        courseId: courseId,\n        stars: newReview.stars\n      };\n      this.http.post(url, reviewDto, {\n        headers\n      }).subscribe(response => {\n        this.getReviewsForCourse(this.courseIdSignal());\n        //show toast\n        this.appService.showSuccessToast('We appreciate your valuable feedback!', 'Thank you for your review');\n      }, error => {\n        this.appService.showFailureToast(\"We're sorry, but there was an error submitting your review. Please try again later.\", 'Review submission failed');\n      });\n    }\n  }\n  getReviewById(id) {\n    const url = `http://localhost:8000/reviews/${id}`;\n    return this.http.get(url);\n  }\n  // READ\n  getReviewsForCourse(courseId, page = 1) {\n    //show placeholder reviews\n    this.isFetchingReviews.set(true);\n    const url = `http://localhost:8000/courses/${courseId}/reviews?page=${page}`;\n    //get the reviews\n    //and meta data for pagination\n    this.http.get(url).subscribe(response => {\n      //save the reviews\n      this._reviews = response.reviews;\n      this.reviewListSignal.set(response.reviews);\n      //save the meta data\n      //meta data for pagination\n      let meta = new app_meta_1.MetaData(response.meta.totalItems, response.meta.currentPage, response.meta.pageSize);\n      this.metaDataSignal.set(meta);\n      //stop placeholder reviews\n      this.isFetchingReviews.set(false);\n    }, error => {\n      console.error(error);\n    });\n  }\n  // UPDATE\n  updateReview(id, newReview) {\n    if (!!newReview) {\n      const headers = this.headers();\n      let reviewDto = {\n        courseId: newReview.courseId,\n        content: newReview.content,\n        stars: newReview.stars\n      };\n      this.http.put(`http://localhost:8000/reviews/${id}`, reviewDto, {\n        headers\n      }).subscribe(response => {\n        this.getReviewsForCourse(this.courseIdSignal());\n        this.appService.showSuccessToast('Thank you for your revised feedback!', 'Review updated');\n      }, error => {\n        this.appService.showFailureToast(\"We're sorry, but there was an error updating your review. Please try again later.\", 'Review update failed');\n      });\n    }\n  }\n  // DELETE\n  deleteReview(id) {\n    const headers = this.headers();\n    const url = `http://localhost:8000/reviews/${id}`;\n    this.http.delete(url, {\n      headers\n    }).subscribe(response => {\n      this.getReviewsForCourse(this.courseIdSignal());\n      this.appService.showSuccessToast('Your review has been successfully removed.', 'Review deleted successfully');\n    }, error => {\n      this.appService.showFailureToast(\"We're sorry, but there was an error deleting your review. Please try again later.\", 'Failed to delete review');\n    });\n  }\n  headers() {\n    let token = this.userService.getJwtToken();\n    const headers = new http_1.HttpHeaders().set('Content-Type', 'application/json').set('Authorization', `Bearer ${token}`);\n    return headers;\n  }\n}\n_class = ReviewsService;\n_class.ɵfac = function ReviewsService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppService), i0.ɵɵinject(i3.UsersService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexports.ReviewsService = ReviewsService;","map":{"version":3,"names":["core_1","require","http_1","app_meta_1","ReviewsService","constructor","http","appService","userService","_reviews","Array","_metaData","MetaData","reviewListSignal","signal","metaDataSignal","courseIdSignal","isFetchingReviews","loggedInUser","computed","user","addReview","courseId","newReview","url","headers","reviewDto","content","userId","stars","post","subscribe","response","getReviewsForCourse","showSuccessToast","error","showFailureToast","getReviewById","id","get","page","set","reviews","meta","totalItems","currentPage","pageSize","console","updateReview","put","deleteReview","delete","token","getJwtToken","HttpHeaders","i0","ɵɵinject","i1","HttpClient","i2","AppService","i3","UsersService","factory","ɵfac","providedIn","exports"],"sources":["C:\\Users\\Pierce T. Nyamuda\\Documents\\BYUI Courses\\spring2023\\Angular\\final-project\\frontend\\src\\app\\reviews\\reviews.service.ts"],"sourcesContent":["import {\n  Injectable,\n  WritableSignal,\n  signal,\n  computed,\n  Signal,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Review, ReviewMetaDto } from './review.model';\n\nimport { UsersService } from '../users/users.service';\nimport { User } from '../users/user.model';\nimport { AppService } from '../app.service';\nimport { MetaData } from '../app.meta';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReviewsService {\n  private _reviews = new Array<Review>();\n  //meta data for pagination\n  private _metaData = new MetaData(0, 0, 0);\n\n  //Signals\n  public reviewListSignal: WritableSignal<Review[]> = signal(this._reviews);\n  public metaDataSignal: WritableSignal<MetaData> = signal(this._metaData);\n  public courseIdSignal: WritableSignal<string> = signal('');\n  //display placeholder reviews\n  //in case its fetching reviews\n  public isFetchingReviews: WritableSignal<boolean> = signal(false);\n  //information about the logged in user\n  public loggedInUser: Signal<User> = computed(() => this.userService.user());\n\n  constructor(\n    private http: HttpClient,\n    private appService: AppService,\n    private userService: UsersService\n  ) {}\n\n  // CREATE\n  addReview(courseId: string, newReview: Review) {\n    if (!!newReview) {\n      const url = 'http://localhost:8000/reviews';\n      const headers = this.headers();\n\n      let reviewDto = {\n        content: newReview.content,\n        userId: this.loggedInUser()['_id'],\n        courseId: courseId,\n        stars: newReview.stars,\n      };\n\n      this.http.post(url, reviewDto, { headers }).subscribe(\n        (response) => {\n          this.getReviewsForCourse(this.courseIdSignal());\n          //show toast\n          this.appService.showSuccessToast(\n            'We appreciate your valuable feedback!',\n            'Thank you for your review'\n          );\n        },\n        (error) => {\n          this.appService.showFailureToast(\n            \"We're sorry, but there was an error submitting your review. Please try again later.\",\n            'Review submission failed'\n          );\n        }\n      );\n    }\n  }\n\n  getReviewById(id: string): Observable<Review> {\n    const url = `http://localhost:8000/reviews/${id}`;\n    return this.http.get<Review>(url);\n  }\n\n  // READ\n  getReviewsForCourse(courseId: string, page: number = 1) {\n    //show placeholder reviews\n    this.isFetchingReviews.set(true);\n    const url = `http://localhost:8000/courses/${courseId}/reviews?page=${page}`;\n\n    //get the reviews\n    //and meta data for pagination\n    this.http.get<ReviewMetaDto>(url).subscribe(\n      (response: ReviewMetaDto) => {\n        //save the reviews\n        this._reviews = response.reviews;\n        this.reviewListSignal.set(response.reviews);\n\n        //save the meta data\n        //meta data for pagination\n        let meta = new MetaData(\n          response.meta.totalItems,\n          response.meta.currentPage,\n          response.meta.pageSize\n        );\n        this.metaDataSignal.set(meta);\n\n        //stop placeholder reviews\n        this.isFetchingReviews.set(false);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  }\n\n  // UPDATE\n  updateReview(id: string, newReview: Review) {\n    if (!!newReview) {\n      const headers = this.headers();\n\n      let reviewDto = {\n        courseId: newReview.courseId,\n        content: newReview.content,\n        stars: newReview.stars,\n      };\n\n      this.http\n        .put(`http://localhost:8000/reviews/${id}`, reviewDto, { headers })\n        .subscribe(\n          (response) => {\n            this.getReviewsForCourse(this.courseIdSignal());\n            this.appService.showSuccessToast(\n              'Thank you for your revised feedback!',\n              'Review updated'\n            );\n          },\n          (error) => {\n            this.appService.showFailureToast(\n              \"We're sorry, but there was an error updating your review. Please try again later.\",\n              'Review update failed'\n            );\n          }\n        );\n    }\n  }\n\n  // DELETE\n  deleteReview(id: string) {\n    const headers = this.headers();\n    const url = `http://localhost:8000/reviews/${id}`;\n\n    this.http.delete(url, { headers }).subscribe(\n      (response) => {\n        this.getReviewsForCourse(this.courseIdSignal());\n        this.appService.showSuccessToast(\n          'Your review has been successfully removed.',\n          'Review deleted successfully'\n        );\n      },\n      (error) => {\n        this.appService.showFailureToast(\n          \"We're sorry, but there was an error deleting your review. Please try again later.\",\n          'Failed to delete review'\n        );\n      }\n    );\n  }\n\n  headers(): HttpHeaders {\n    let token = this.userService.getJwtToken();\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/json')\n      .set('Authorization', `Bearer ${token}`);\n\n    return headers;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}